{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "index",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_POOLS_PER_PAIR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "_tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "_tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint24",
          "name": "_fee",
          "type": "uint24"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_index",
          "type": "uint32"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "poolAddr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parameters",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "int24",
          "name": "tickLower",
          "type": "int24"
        },
        {
          "internalType": "int24",
          "name": "tickUpper",
          "type": "int24"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0875299b072f1a771d9bcdf85c41323a2af5244ab4a54b6f086f29984007cc2d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2871365",
    "logsBloom": "0x
    "blockHash": "0xcacf0fdd874fdc1b6fd281f5054080fbf9634a38dbbf350435e2b6658fc785de",
    "transactionHash": "0x0875299b072f1a771d9bcdf85c41323a2af5244ab4a54b6f086f29984007cc2d",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2871365",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e6f3973e3c1460d2283c827658d8f7cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_POOLS_PER_PAIR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"_tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"_tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"_fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_index\",\"type\":\"uint32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Factory.sol\":\"Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\nimport \\\"./interfaces/IFactory.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract Factory is IFactory {\\n    //set a limitation to each pool list\\n    uint256 public constant MAX_POOLS_PER_PAIR = 100;\\n    mapping(address => mapping(address => address[])) pools;\\n    mapping(bytes32 => address) onlyPool;\\n\\n    function sortAddress(\\n        address _addrA,\\n        address _addrB\\n    ) private pure returns (address, address) {\\n        return _addrA < _addrB ? (_addrA, _addrB) : (_addrB, _addrA);\\n    }\\n\\n    function validateAddress(address _addrA, address _addrB) private pure {\\n        require(_addrA != _addrB, \\\"Factory: identical address\\\");\\n        require(\\n            _addrA != address(0) && _addrB != address(0),\\n            \\\"Factory: address zero\\\"\\n        );\\n    }\\n    Parameters public override parameters;\\n    function getPool(\\n        address _tokenA,\\n        address _tokenB,\\n        uint32 _index\\n    ) external view override returns (address poolAddr) {\\n        validateAddress(_tokenA, _tokenB);\\n        address token0;\\n        address token1;\\n        (token0, token1) = sortAddress(_tokenA, _tokenB);\\n        poolAddr = pools[token0][token1][_index];\\n    }\\n\\n    function createPool(\\n        address _tokenA,\\n        address _tokenB,\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        uint24 _fee\\n    ) external override returns (address poolAddr) {\\n        validateAddress(_tokenA, _tokenB);\\n        address token0;\\n        address token1;\\n        (token0, token1) = sortAddress(_tokenA, _tokenB);\\n\\n        address[] storage poolList = pools[token0][token1];\\n        require(\\n            poolList.length < MAX_POOLS_PER_PAIR,\\n            \\\"Factory: too many pools for this pair\\\"\\n        );\\n\\n        // for (uint24 i; i < poolList.length; i++) {\\n        //     IPool pool = IPool(poolList[i]);\\n        //     bool condition = (pool.fee() == _fee) &&\\n        //         (pool.tickLower() == _tickLower) &&\\n        //         ((pool.tickUpper() == _tickUpper));\\n\\n        //     if (condition) return poolList[i];\\n        // }\\n        parameters = Parameters(\\n            address(this),\\n            token0,\\n            token1,\\n            _tickLower,\\n            _tickUpper,\\n            _fee\\n        );\\n        bytes32 _salt = keccak256(\\n            abi.encode(token0, token1, _tickLower, _tickUpper, _fee)\\n        );\\n        require(onlyPool[_salt] == address(0), \\\"Factory:address already exist\\\");\\n        poolAddr = address(new Pool{salt: _salt}());\\n        onlyPool[_salt] = poolAddr;\\n        pools[token0][token1].push(poolAddr);\\n        // delete pool info\\n        delete parameters;\\n        emit PoolCreated(\\n            token0,\\n            token1,\\n            uint32(poolList.length),\\n            _tickLower,\\n            _tickUpper,\\n            _fee,\\n            poolAddr\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1aa3f1a43efee5e12b45133bbf7c2857787ddd73dae1a51d2ace3cebf65153f1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"./libraries/SqrtPriceMath.sol\\\";\\nimport \\\"./libraries/TickMath.sol\\\";\\nimport \\\"./libraries/LiquidityMath.sol\\\";\\nimport \\\"./libraries/LowGasSafeMath.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\nimport \\\"./libraries/SwapMath.sol\\\";\\nimport \\\"./libraries/FixedPoint128.sol\\\";\\n\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IFactory.sol\\\";\\ncontract Pool is IPool {\\n    using LowGasSafeMath for uint256;\\n\\n    address public immutable override factory;\\n    address public immutable override token0;\\n    address public immutable override token1;\\n    uint24 public immutable override fee;\\n    int24 public immutable override tickUpper;\\n    int24 public immutable override tickLower;\\n\\n    int24 public override tick;\\n    uint160 public override sqrtPriceX96;\\n    uint128 public override liquidity;\\n    uint256 public override feeGrowthGlobal0X128;\\n    uint256 public override feeGrowthGlobal1X128;\\n    /**\\n    \\u5e76\\u6ca1\\u6709\\u663e\\u793a\\u7684\\u521d\\u59cb\\u5316positions\\uff0c\\u9ed8\\u8ba4\\u503c0\\u5373\\u53ef\\n    \\u4f60\\u4e0d\\u9700\\u8981\\u5728\\u5408\\u7ea6\\u7684\\u5176\\u4ed6\\u5730\\u65b9\\u663e\\u5f0f\\u521d\\u59cb\\u5316 positions\\uff0c\\n    \\u53ea\\u8981\\u901a\\u8fc7 positions[params.owner] \\u8bbf\\u95ee\\uff0cSolidity \\u5c31\\u4f1a\\u81ea\\u52a8\\u521b\\u5efa\\u5e76\\u521d\\u59cb\\u5316\\u5b83\\u3002\\n     */\\n    mapping(address => Position) public positions;\\n    constructor() {\\n        (factory, token0, token1, tickLower, tickUpper, fee) = IFactory(\\n            msg.sender\\n        ).parameters();\\n    }\\n    function getPosition(\\n        address owner\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        )\\n    {\\n        Position memory res = positions[owner];\\n        _liquidity = res.liquidity;\\n        feeGrowthInside0LastX128 = res.feeGrowthInside0LastX128;\\n        feeGrowthInside1LastX128 = res.feeGrowthInside1LastX128;\\n        tokensOwed0 = res.token0CouldWithdraw;\\n        tokensOwed1 = res.token1CouldWithdraw;\\n    }\\n\\n    struct ModifyPositionParams {\\n        address owner;\\n        int128 liquidityChange;\\n    }\\n    //-----------------------utils function---------------\\n    function _modifyPosition(\\n        ModifyPositionParams memory params\\n    ) private returns (int256 amount0, int256 amount1) {\\n        //SqrtPriceMath.getAmount0Delta:\\u8ba1\\u7b97\\u7531\\u4e8e\\u65b0\\u589e\\u6d41\\u52a8\\u6027\\u800c\\u9700\\u8981\\u591a\\u5c11 token0\\n        //sqrtPriceX96\\uff1a\\u5f53\\u524d\\u7684\\u4ef7\\u683c\\uff0c\\u5df2\\u8fdb\\u884c sqrtPrice \\u5904\\u7406\\uff0896 \\u4f4d\\uff09\\n        //TickMath.getSqrtPriceAtTick(tickUpper)\\uff1a\\u6839\\u636e\\u4e0a\\u9650 tickUpper \\u83b7\\u53d6\\u8be5\\u533a\\u95f4\\u7684\\u4ef7\\u683c\\uff08sqrtPrice\\uff09\\u3002\\n        //params.liquidityDelta\\uff1a\\u8868\\u793a\\u6d41\\u52a8\\u6027\\u53d8\\u5316\\u7684\\u6570\\u91cf\\n        amount0 = SqrtPriceMath.getAmount0Delta(\\n            sqrtPriceX96,\\n            TickMath.getSqrtPriceAtTick(tickUpper),\\n            params.liquidityChange\\n        );\\n\\n        amount1 = SqrtPriceMath.getAmount1Delta(\\n            sqrtPriceX96,\\n            TickMath.getSqrtPriceAtTick(tickLower),\\n            params.liquidityChange\\n        );\\n        Position storage position = positions[params.owner];\\n        // \\u63d0\\u53d6\\u624b\\u7eed\\u8d39\\uff0c\\u8ba1\\u7b97\\u4ece\\u4e0a\\u4e00\\u6b21\\u63d0\\u53d6\\u5230\\u5f53\\u524d\\u7684\\u624b\\u7eed\\u8d39\\n        uint128 tokensOwed0 = uint128(\\n            FullMath.mulDiv(\\n                feeGrowthGlobal0X128 - position.feeGrowthInside0LastX128,\\n                position.liquidity,\\n                FixedPoint128.Q128\\n            )\\n        );\\n        uint128 tokensOwed1 = uint128(\\n            FullMath.mulDiv(\\n                feeGrowthGlobal1X128 - position.feeGrowthInside1LastX128,\\n                position.liquidity,\\n                FixedPoint128.Q128\\n            )\\n        );\\n        // \\u66f4\\u65b0\\u63d0\\u53d6\\u624b\\u7eed\\u8d39\\u7684\\u8bb0\\u5f55\\uff0c\\u540c\\u6b65\\u5230\\u5f53\\u524d\\u6700\\u65b0\\u7684 feeGrowthGlobal0X128\\uff0c\\u4ee3\\u8868\\u90fd\\u63d0\\u53d6\\u5b8c\\u4e86\\n        position.feeGrowthInside0LastX128 = feeGrowthGlobal0X128;\\n        position.feeGrowthInside1LastX128 = feeGrowthGlobal1X128;\\n\\n        liquidity = LiquidityMath.addDelta(liquidity, params.liquidityChange);\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            position.token0CouldWithdraw += tokensOwed0;\\n            position.token1CouldWithdraw += tokensOwed1;\\n        }\\n\\n        position.liquidity = LiquidityMath.addDelta(\\n            position.liquidity,\\n            params.liquidityChange\\n        );\\n    }\\n    function getThisContractBalance(\\n        address addr\\n    ) private view returns (uint256 balance) {\\n        IERC20 resAddr = addr == token0 ? IERC20(token0) : IERC20(token1);\\n        balance = resAddr.balanceOf(address(this));\\n    }\\n\\n    //-----------------------------actual functions ----------------------\\n    function initialize(uint160 sqrtPriceX96_) external override {\\n        require(sqrtPriceX96 == 0, \\\"INITIALIZED\\\");\\n        // \\u901a\\u8fc7\\u4ef7\\u683c\\u83b7\\u53d6 tick\\uff0c\\u5224\\u65ad tick \\u662f\\u5426\\u5728 tickLower \\u548c tickUpper \\u4e4b\\u95f4\\n        tick = TickMath.getTickAtSqrtPrice(sqrtPriceX96_);\\n        require(\\n            tick >= tickLower && tick < tickUpper,\\n            \\\"sqrtPriceX96 should be within the range of [tickLower, tickUpper)\\\"\\n        );\\n        // \\u521d\\u59cb\\u5316 Pool \\u7684 sqrtPriceX96\\n        sqrtPriceX96 = sqrtPriceX96_;\\n    }\\n\\n    //bytes \\u52a8\\u6001\\u5b57\\u8282\\u6570\\u7ec4 calldata\\u53ea\\u80fd\\u7528\\u4e8e\\u5f15\\u7528\\u7c7b\\u578b bytes32\\u662f\\u7b80\\u5355\\u7c7b\\u578b\\n    function mint(\\n        address _recipient,\\n        uint128 _amount,\\n        bytes calldata _data\\n    ) external override returns (uint256 amount0, uint256 amount1) {\\n        ModifyPositionParams memory params = ModifyPositionParams({\\n            owner: _recipient,\\n            liquidityChange: int128(_amount)\\n        });\\n        (int256 amount0Int, int256 amount1Int) = _modifyPosition(params);\\n        require(amount0Int > 0, \\\"amount0Int is negative\\\");\\n        require(amount1Int > 0, \\\"amount1Int is negative\\\");\\n        amount0 = uint256(amount0Int);\\n        amount1 = uint256(amount1Int);\\n\\n        // to do  IMintCallback\\n        IMintCallback(msg.sender).mintCallback(amount0, amount1, _data);\\n        emit Mint(msg.sender, _recipient, _amount, amount0, amount1);\\n    }\\n\\n    /**\\nmint\\uff1aliquidity\\u589e\\u52a0\\uff0c\\u53ef\\u63d0\\u53d6\\u4ee3\\u5e01\\u901a\\u8fc7\\u53ef\\u63d0\\u53d6\\u624b\\u7eed\\u8d39\\u5448\\u73b0\\u589e\\u52a0  \\u63d0\\u53d6fee\\u4fe1\\u606f\\u8bb0\\u5f55\\u7167\\u65e7\\n\\u6240\\u4ee5\\uff1a_modifyPosition\\u4e2d\\u6536\\u5230\\u6b63\\u6570int128(_amount) \\u5e76\\u4e14  position.token0CouldWithdraw += tokensOwed0\\n\\n */\\n    /**\\nburn\\uff1aliquidity\\u51cf\\u5c11 \\u53ef\\u63d0\\u53d6\\u4ee3\\u5e010\\u548c1\\u589e\\u52a0 \\u63d0\\u53d6fee\\u4fe1\\u606f\\u8bb0\\u5f55\\u7167\\u65e7\\n\\u6240\\u4ee5\\uff1atoken0CouldWithdraw ++ \\uff1b\\n_modifyPosition\\u4e2dliquidity\\u6536\\u5230\\u8d1f\\u6570 -- \\uff1b\\n\\n */\\n    function burn(\\n        uint128 _amount\\n    ) external override returns (uint256 amount0, uint256 amount1) {\\n        require(_amount > 0, \\\"_amount must greater than zero\\\");\\n        require(\\n            _amount <= positions[msg.sender].liquidity,\\n            \\\"insufficient balance\\\"\\n        );\\n        ModifyPositionParams memory params = ModifyPositionParams({\\n            owner: msg.sender,\\n            liquidityChange: -int128(_amount)\\n        });\\n        (int256 _amount0, int256 _amount1) = _modifyPosition(params);\\n        amount0 = uint256(-_amount0);\\n        amount1 = uint256(-_amount1);\\n\\n        if (amount0 > 0 || amount1 > 0) {\\n            positions[msg.sender].token0CouldWithdraw += uint128(amount0);\\n            positions[msg.sender].token1CouldWithdraw += uint128(amount1);\\n        }\\n        emit Burn(msg.sender, _amount, amount0, amount1);\\n    }\\n\\n    function collect(\\n        address _recipient,\\n        uint128 _amount0Requested,\\n        uint128 _amount1Requested\\n    ) external override returns (uint128 amount0, uint128 amount1) {\\n        // Position memory position = positions[_recipient];\\n        /**\\n        problem1: \\u5b9a\\u4e49\\u4e3amemory\\u7684\\u8bdd\\u610f\\u5473\\u7740\\u521b\\u5efa\\u4e86\\u4e00\\u4e2a\\u526f\\u672c\\uff0c\\u4fee\\u6539\\u53ea\\u662f\\u9488\\u5bf9\\u526f\\u672c\\uff1b\\u4e0d\\u4f1a\\u5f71\\u54cd\\u5408\\u7ea6\\u7684\\u72b6\\u6001\\n        problem2: _recipient \\u8fd8\\u662f  msg.sender \\uff1f\\n         */\\n        Position storage position = positions[msg.sender];\\n        amount0 = _amount0Requested > position.token0CouldWithdraw\\n            ? position.token0CouldWithdraw\\n            : _amount0Requested;\\n        amount1 = _amount1Requested > position.token1CouldWithdraw\\n            ? position.token1CouldWithdraw\\n            : _amount1Requested;\\n\\n        if (amount0 > 0) {\\n            TransferHelper.safeTransfer(token0, _recipient, amount0);\\n            position.token0CouldWithdraw -= amount0;\\n        }\\n        if (amount1 > 0) {\\n            TransferHelper.safeTransfer(token1, _recipient, amount1);\\n            position.token1CouldWithdraw -= amount1;\\n        }\\n        emit Collect(msg.sender, _recipient, amount0, amount1);\\n    }\\n    //+++++++++++++  swap\\n\\n    struct SwapState {\\n        int256 amountSpecifiedRemaining;\\n        int256 amountCalculated;\\n        uint160 sqrtPriceX96;\\n        uint256 feeGrowthGlobalX128;\\n        uint256 amountIn;\\n        uint256 amountOut; //always be negative\\n        uint256 feeAmount;\\n    }\\n\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external override returns (int256 amount0, int256 amount1) {\\n        /**\\n        amountSpecified:\\u662f\\u7528\\u6237\\u6700\\u521d\\u8f93\\u5165\\u7684 swap \\u6570\\u91cf\\uff08\\u4e70\\u5165\\u6216\\u8005\\u5356\\u51fa\\uff09\\n        sqrtPriceLimitX96\\uff1a\\u4ea4\\u6613\\u8005\\u8f93\\u5165\\u7684\\u76ee\\u6807\\u4ef7\\u683c\\n\\n        amountSpecified>0 : amount of token0\\uff0c zeroForOne===true ,sqrtPriceLimitX96 < sqrtPriceX96\\n        amountSpecified<0 : amount of token1, zeroForOne===false, sqrtPriceLimitX96 > sqrtPriceX96\\n         */\\n        require(amountSpecified != 0, \\\"amountSpecified cannot be zero\\\");\\n        /**\\n       \\u6240\\u4ee5\\u603b\\u7ed3\\u4e00\\u4e0b\\u662f\\u8fd9\\u4e48\\u7406\\u89e3\\u7684\\uff1asqrtPriceX96\\u59cb\\u7ec8\\u8868\\u793a\\u7684\\u662f\\u5f53\\u524d\\u6c60\\u5b50\\u7684\\u4ef7\\u683c\\uff0c\\u4e14\\u59cb\\u7ec8\\u662ftoken0\\u76f8\\u5bf9token1\\u7684\\u4ef7\\u683c\\uff1b\\n       \\u6240\\u4ee5zeroForOne\\u7684\\u65f6\\u5019\\uff0c\\u7528\\u6237\\u5e0c\\u671btoken0\\u76f8\\u5bf9token1\\u7684\\u4ef7\\u683c\\u662f\\u6bd4\\u8f83\\u9ad8\\u7684\\u56e0\\u4e3a\\u8fd9\\u6837\\u53ef\\u4ee5\\u6362\\u53d6\\u66f4\\u591a\\u7684token1\\uff0c\\n       \\u6240\\u4ee5\\u5c31\\u6709\\u4e86\\u6761\\u4ef6\\u3010sqrtPriceLimitX96 < sqrtPriceX96\\u3011\\u56e0\\u4e3a\\u6c60\\u5b50\\u4ef7\\u683c\\u5982\\u679c\\u66f4\\u4f4e\\u5c31\\u4e0d\\u7b26\\u5408\\u7528\\u6237\\u7684\\u9884\\u671f\\u4e86\\u3002\\n       \\u800c\\u4e00\\u65e6\\u4ea4\\u6613\\u5f00\\u59cb\\uff0c\\u968f\\u7740\\u6c60\\u5b50\\u4e2d\\u6d8c\\u5165token1\\uff0c\\u4f1a\\u9020\\u6210sqrtPriceX96\\u964d\\u4f4e\\uff0c\\u6240\\u4ee5\\u6211\\u4eec\\u4e5f\\u9700\\u8981\\u4fdd\\u8bc1\\u6700\\u4f4e\\u4e0d\\u80fd\\u4f4e\\u4e8e\\u7cfb\\u7edf\\u6700\\u4f4e\\u503c\\uff0c\\n       \\u4e8e\\u662f\\u6709\\u4e86\\u6761\\u4ef6\\u3010sqrtPriceLimitX96 > TickMath.MIN_SQRT_PRICE\\u3011\\n       \\n        TickMath.MIN_SQRT_PRICE\\uff1a\\u3010\\u8fd9\\u662f\\u7cfb\\u7edf\\u5141\\u8bb8\\u7684\\u6700\\u5c0f\\u4ef7\\u683c\\uff0c\\u8868\\u793a token1 \\u76f8\\u5bf9\\u4e8e token0 \\u7684\\u6700\\u4f4e\\u4ef7\\u683c\\u3002\\n        \\u5b83\\u662f\\u4e00\\u4e2a\\u56fa\\u5b9a\\u503c\\uff0c\\u901a\\u5e38\\u7528\\u4e8e\\u9632\\u6b62\\u4ef7\\u683c\\u8fc7\\u4f4e\\uff08\\u4f8b\\u5982\\uff0c\\u9632\\u6b62\\u9664\\u96f6\\u9519\\u8bef\\uff09\\u3011\\n        TickMath.getSqrtPriceAtTick(tickLower)\\uff1a\\u3010\\u8fd9\\u662f\\u5f53\\u524d\\u6d41\\u52a8\\u6027\\u533a\\u95f4\\u7684\\u6700\\u4f4e\\u4ef7\\u683c\\uff0c\\u7531 tickLower \\u51b3\\u5b9a\\u3002\\n        \\u5b83\\u8868\\u793a\\u5f53\\u524d\\u6d41\\u52a8\\u6027\\u533a\\u95f4\\u7684\\u4e0b\\u9650\\u4ef7\\u683c\\u3002\\u3011\\n        \\u6d41\\u52a8\\u6027\\u533a\\u95f4\\u7684\\u4ef7\\u683c\\u8303\\u56f4\\u5fc5\\u987b\\u5728\\u7cfb\\u7edf\\u5141\\u8bb8\\u7684\\u8303\\u56f4\\u5185\\n         */\\n        require(\\n            zeroForOne\\n                ? sqrtPriceLimitX96 < sqrtPriceX96 &&\\n                    sqrtPriceLimitX96 > TickMath.MIN_SQRT_PRICE\\n                : sqrtPriceLimitX96 > sqrtPriceX96 &&\\n                    sqrtPriceLimitX96 < TickMath.MAX_SQRT_PRICE,\\n            \\\"sqrtPriceLimitX96 insufficient\\\"\\n        );\\n\\n        SwapState memory state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified,\\n            amountCalculated: 0,\\n            sqrtPriceX96: sqrtPriceX96,\\n            feeGrowthGlobalX128: zeroForOne\\n                ? feeGrowthGlobal0X128\\n                : feeGrowthGlobal1X128,\\n            amountIn: 0,\\n            amountOut: 0,\\n            feeAmount: 0\\n        });\\n        // \\u8ba1\\u7b97\\u4ea4\\u6613\\u7684\\u4e0a\\u4e0b\\u9650\\uff0c\\u57fa\\u4e8e tick \\u8ba1\\u7b97\\u4ef7\\u683c\\n        uint160 sqrtPriceX96Lower = TickMath.getSqrtPriceAtTick(tickLower);\\n        uint160 sqrtPriceX96Upper = TickMath.getSqrtPriceAtTick(tickUpper);\\n        uint160 sqrtPriceNew;\\n        if (zeroForOne) {\\n            sqrtPriceNew = sqrtPriceX96Lower < sqrtPriceLimitX96\\n                ? sqrtPriceLimitX96\\n                : sqrtPriceX96Lower;\\n        } else {\\n            sqrtPriceNew = sqrtPriceX96Upper > sqrtPriceLimitX96\\n                ? sqrtPriceLimitX96\\n                : sqrtPriceX96Upper;\\n        }\\n\\n        // uint160 final\\n        //\\u8ba1\\u7b97 \\u4e00\\u6b21\\u4ea4\\u6362\\u7684\\u7ed3\\u679c\\n        (\\n            state.sqrtPriceX96,\\n            state.amountIn,\\n            state.amountOut,\\n            state.feeAmount\\n        ) = SwapMath.computeSwapStep(\\n            sqrtPriceX96,\\n            sqrtPriceNew,\\n            liquidity,\\n            amountSpecified,\\n            fee\\n        );\\n        sqrtPriceX96 = state.sqrtPriceX96;\\n        tick = TickMath.getTickAtSqrtPrice(state.sqrtPriceX96);\\n\\n        // \\u8ba1\\u7b97\\u624b\\u7eed\\u8d39\\n        state.feeGrowthGlobalX128 += FullMath.mulDiv(\\n            state.feeAmount,\\n            FixedPoint128.Q128,\\n            liquidity\\n        );\\n        if (zeroForOne) {\\n            feeGrowthGlobal0X128 = state.feeGrowthGlobalX128;\\n        } else {\\n            feeGrowthGlobal1X128 = state.feeGrowthGlobalX128;\\n        }\\n        bool exactInput = amountSpecified > 0;\\n\\n        if (exactInput) {\\n            //specified input\\n            state.amountSpecifiedRemaining -= SafeCast.toInt256(\\n                state.amountIn + state.feeAmount\\n            );\\n            state.amountCalculated -= SafeCast.toInt256(state.amountOut);\\n        } else {\\n            //specified output\\n            state.amountSpecifiedRemaining += SafeCast.toInt256(\\n                state.amountOut\\n            );\\n            state.amountCalculated += SafeCast.toInt256(\\n                state.amountIn + state.feeAmount\\n            );\\n        }\\n\\n        if (zeroForOne == exactInput) {\\n            //amountSpecified positive\\n            amount0 = amountSpecified - state.amountSpecifiedRemaining;\\n            amount1 = state.amountCalculated;\\n        } else {\\n            //amountSpecified negative\\n            amount0 = state.amountCalculated;\\n            amount1 = amountSpecified - state.amountSpecifiedRemaining;\\n        }\\n        if (zeroForOne) {\\n            uint256 balanceBefore = getThisContractBalance(token0);\\n            //to do why\\n            ISwapCallback(msg.sender).swapCallback(amount0, amount1, data);\\n            require(\\n                balanceBefore + uint256(amount0) <=\\n                    getThisContractBalance(token0),\\n                \\\"Pool swap:wrong balance of token0\\\"\\n            );\\n            if (amount1 < 0) {\\n                TransferHelper.safeTransfer(\\n                    token1,\\n                    recipient,\\n                    uint256(-amount1)\\n                );\\n            }\\n        } else {\\n            uint256 balanceBefore = getThisContractBalance(token1);\\n            ISwapCallback(msg.sender).swapCallback(amount0, amount1, data);\\n            require(\\n                balanceBefore + uint256(amount1) <=\\n                    getThisContractBalance(token1)\\n            );\\n            if (amount0 < 0) {\\n                TransferHelper.safeTransfer(\\n                    token1,\\n                    recipient,\\n                    uint256(-amount0)\\n                );\\n            }\\n        }\\n        emit Swap(\\n            msg.sender,\\n            recipient,\\n            amount0,\\n            amount1,\\n            sqrtPriceX96,\\n            liquidity,\\n            tick\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x274c204b521abed0cd9ff0b2ea18f2406817af15ade16c377700434e6995824c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\n\\ninterface IFactory {\\n    struct Parameters {\\n        address factory;\\n        address tokenA;\\n        address tokenB;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint24 fee;\\n    }\\n\\n    function parameters()\\n        external\\n        view\\n        returns (\\n            address factory,\\n            address tokenA,\\n            address tokenB,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint24 fee\\n        );\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint32 index\\n    ) external view returns (address pool);\\n\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    event PoolCreated(\\n        address token0,\\n        address token1,\\n        uint32 index,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint24 fee,\\n        address pool\\n    );\\n}\\n\",\"keccak256\":\"0xbc3ca9ebc567ecea1133383f21ca12f6210af575b77071297deb4ff1562ff3d4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\n\\ninterface IMintCallback {\\n    function mintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface ISwapCallback {\\n    function swapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IPool {\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function fee() external view returns (uint24);\\n\\n    function tick() external view returns (int24);\\n\\n    function tickLower() external view returns (int24);\\n\\n    function tickUpper() external view returns (int24);\\n\\n    function sqrtPriceX96() external view returns (uint160);\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    ///@notice growth of tokens\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    struct Position {\\n        // \\u8be5 Position \\u62e5\\u6709\\u7684\\u6d41\\u52a8\\u6027\\n        uint128 liquidity;\\n        // \\u53ef\\u63d0\\u53d6\\u7684 token\\u6570\\u91cf\\n        uint128 token0CouldWithdraw;\\n        uint128 token1CouldWithdraw;\\n        // \\u4e0a\\u6b21\\u63d0\\u53d6\\u624b\\u7eed\\u8d39\\u65f6\\u7684 feeGrowthGlobal0X128\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n    }\\n    function getPosition(\\n        address owner\\n    )\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function collect(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    function mint(\\n        address recipient,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function burn(\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n    event Burn(\\n        address indexed owner,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n}\\n\",\"keccak256\":\"0xc2275402f0cb13941f884ca865e6c390d187fc648c4e8837e954da4812f11a89\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title BitMath\\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\\n/// @author Solady (https://github.com/Vectorized/solady/blob/8200a70e8dc2a77ecb074fc2e99a2a0d36547522/src/utils/LibBit.sol)\\nlibrary BitMath {\\n    /// @notice Returns the index of the most significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the most significant bit, must be greater than 0\\n    /// @return r the index of the most significant bit\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(\\n                        0x1f,\\n                        shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)\\n                    ),\\n                    0x0706060506020500060203020504000106050205030304010505030400000000\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @notice Returns the index of the least significant bit of the number,\\n    ///     where the least significant bit is at index 0 and the most significant bit is at index 255\\n    /// @param x the value for which to compute the least significant bit, must be greater than 0\\n    /// @return r the index of the least significant bit\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Isolate the least significant bit.\\n            x := and(x, sub(0, x))\\n            // For the upper 3 bits of the result, use a De Bruijn-like lookup.\\n            // Credit to adhusson: https://blog.adhusson.com/cheap-find-first-set-evm/\\n            // forgefmt: disable-next-item\\n            r := shl(\\n                5,\\n                shr(\\n                    252,\\n                    shl(\\n                        shl(\\n                            2,\\n                            shr(\\n                                250,\\n                                mul(\\n                                    x,\\n                                    0xb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff\\n                                )\\n                            )\\n                        ),\\n                        0x8040405543005266443200005020610674053026020000107506200176117077\\n                    )\\n                )\\n            )\\n            // For the lower 5 bits of the result, use a De Bruijn lookup.\\n            // forgefmt: disable-next-item\\n            r := or(\\n                r,\\n                byte(\\n                    and(div(0xd76453e0, shr(r, x)), 0x1f),\\n                    0x001f0d1e100c1d070f090b19131c1706010e11080a1a141802121b1503160405\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x834f1c376abeeef84a21f9dc40897c61ecee062000df6eb52be00da7a92cbc6d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CustomRevert.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Library for reverting with custom errors efficiently\\n/// @notice Contains functions for reverting with custom errors with different argument types efficiently\\n/// @dev To use this library, declare `using CustomRevert for bytes4;` and replace `revert CustomError()` with\\n/// `CustomError.selector.revertWith()`\\n/// @dev The functions may tamper with the free memory pointer but it is fine since the call context is exited immediately\\nlibrary CustomRevert {\\n    /// @dev Reverts with the selector of a custom error in the scratch space\\n    function revertWith(bytes4 selector) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            revert(0, 0x04)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an address argument in the scratch space\\n    function revertWith(bytes4 selector, address addr) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(addr, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with an int24 argument in the scratch space\\n    function revertWith(bytes4 selector, int24 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, signextend(2, value))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with a uint160 argument in the scratch space\\n    function revertWith(bytes4 selector, uint160 value) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0, selector)\\n            mstore(0x04, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\\n            revert(0, 0x24)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two int24 arguments\\n    function revertWith(\\n        bytes4 selector,\\n        int24 value1,\\n        int24 value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), signextend(2, value1))\\n            mstore(add(fmp, 0x24), signextend(2, value2))\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two uint160 arguments\\n    function revertWith(\\n        bytes4 selector,\\n        uint160 value1,\\n        uint160 value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(\\n                add(fmp, 0x04),\\n                and(value1, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(fmp, 0x24),\\n                and(value2, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @dev Reverts with a custom error with two address arguments\\n    function revertWith(\\n        bytes4 selector,\\n        address value1,\\n        address value2\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let fmp := mload(0x40)\\n            mstore(fmp, selector)\\n            mstore(\\n                add(fmp, 0x04),\\n                and(value1, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            mstore(\\n                add(fmp, 0x24),\\n                and(value2, 0xffffffffffffffffffffffffffffffffffffffff)\\n            )\\n            revert(fmp, 0x44)\\n        }\\n    }\\n\\n    /// @notice bubble up the revert message returned by a call and revert with the selector provided\\n    /// @dev this function should only be used with custom errors of the type `CustomError(address target, bytes revertReason)`\\n    function bubbleUpAndRevertWith(\\n        bytes4 selector,\\n        address addr\\n    ) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            let size := returndatasize()\\n            let fmp := mload(0x40)\\n\\n            // Encode selector, address, offset, size, data\\n            mstore(fmp, selector)\\n            mstore(add(fmp, 0x04), addr)\\n            mstore(add(fmp, 0x24), 0x40)\\n            mstore(add(fmp, 0x44), size)\\n            returndatacopy(add(fmp, 0x64), 0, size)\\n\\n            // Ensure the size is a multiple of 32 bytes\\n            let encodedSize := add(0x64, mul(div(add(size, 31), 32), 32))\\n            revert(fmp, encodedSize)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf305488235157fc365b6d64b15b3526d803a9673c503b5cf40059cc0a006f340\",\"license\":\"MIT\"},\"contracts/libraries/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x2d1f4f73ae0d8f0a210b8d30084659b57c56ac8f2f96011fca36f00a6d417178\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = a * b\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2**256 + prod0\\n            uint256 prod0 = a * b; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly (\\\"memory-safe\\\") {\\n                let mm := mulmod(a, b, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1);\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                assembly (\\\"memory-safe\\\") {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly (\\\"memory-safe\\\") {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            uint256 twos = (0 - denominator) & denominator;\\n            // Divide denominator by power of two\\n            assembly (\\\"memory-safe\\\") {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly (\\\"memory-safe\\\") {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly (\\\"memory-safe\\\") {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the preconditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = mulDiv(a, b, denominator);\\n            if (mulmod(a, b, denominator) != 0) {\\n                require(++result > 0);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97f12e3b616807076c16b3ecc8cd932bb320d40e4f1cab92b99065302a0d7f5a\",\"license\":\"MIT\"},\"contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd53041349718d5bce4a89e87cd911879d41ba42ba3fab0614e5e8b742f352b88\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2 ** 255);\\n        z = int256(y);\\n    }\\n}\\n\",\"keccak256\":\"0xd4c1c1b67f946b077d7c52a158113763a89a210fc2927b8491055a962ecd18c0\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/SqrtPriceMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./LowGasSafeMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\nimport \\\"./FixedPoint96.sol\\\";\\n\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return\\n                        uint160(\\n                            FullMath.mulDivRoundingUp(\\n                                numerator1,\\n                                sqrtPX96,\\n                                denominator\\n                            )\\n                        );\\n            }\\n\\n            return\\n                uint160(\\n                    UnsafeMath.divRoundingUp(\\n                        numerator1,\\n                        (numerator1 / sqrtPX96).add(amount)\\n                    )\\n                );\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require(\\n                (product = amount * sqrtPX96) / amount == sqrtPX96 &&\\n                    numerator1 > product\\n            );\\n            uint256 denominator = numerator1 - product;\\n            return\\n                FullMath\\n                    .mulDivRoundingUp(numerator1, sqrtPX96, denominator)\\n                    .toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                    : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n            );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient = (\\n                amount <= type(uint160).max\\n                    ? UnsafeMath.divRoundingUp(\\n                        amount << FixedPoint96.RESOLUTION,\\n                        liquidity\\n                    )\\n                    : FullMath.mulDivRoundingUp(\\n                        amount,\\n                        FixedPoint96.Q96,\\n                        liquidity\\n                    )\\n            );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountIn,\\n                    true\\n                )\\n                : getNextSqrtPriceFromAmount1RoundingDown(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountIn,\\n                    true\\n                );\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountOut,\\n                    false\\n                )\\n                : getNextSqrtPriceFromAmount0RoundingUp(\\n                    sqrtPX96,\\n                    liquidity,\\n                    amountOut,\\n                    false\\n                );\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(\\n                        numerator1,\\n                        numerator2,\\n                        sqrtRatioBX96\\n                    ),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) /\\n                    sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96)\\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(\\n                    liquidity,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    FixedPoint96.Q96\\n                )\\n                : FullMath.mulDiv(\\n                    liquidity,\\n                    sqrtRatioBX96 - sqrtRatioAX96,\\n                    FixedPoint96.Q96\\n                );\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(-liquidity),\\n                    false\\n                ).toInt256()\\n                : getAmount0Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(liquidity),\\n                    true\\n                ).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(-liquidity),\\n                    false\\n                ).toInt256()\\n                : getAmount1Delta(\\n                    sqrtRatioAX96,\\n                    sqrtRatioBX96,\\n                    uint128(liquidity),\\n                    true\\n                ).toInt256();\\n    }\\n}\\n\",\"keccak256\":\"0x031d30445170307f23827ca6b1e8eb1bc7031fde50f4ef038dd976b98987c7b2\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SwapMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./SqrtPriceMath.sol\\\";\\n\\n/// @title Computes the result of a swap within ticks\\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\\nlibrary SwapMath {\\n    /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\n    /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\n    /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\\n    /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\\n    /// @param liquidity The usable liquidity\\n    /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\\n    /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\n    /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\\n    /// @return feeAmount The amount of input that will be taken as a fee\\n    function computeSwapStep(\\n        uint160 sqrtRatioCurrentX96,\\n        uint160 sqrtRatioTargetX96,\\n        uint128 liquidity,\\n        int256 amountRemaining,\\n        uint24 feePips\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint160 sqrtRatioNextX96,\\n            uint256 amountIn,\\n            uint256 amountOut,\\n            uint256 feeAmount\\n        )\\n    {\\n        bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\\n        bool exactIn = amountRemaining >= 0;\\n\\n        if (exactIn) {\\n            uint256 amountRemainingLessFee = FullMath.mulDiv(\\n                uint256(amountRemaining),\\n                1e6 - feePips,\\n                1e6\\n            );\\n            amountIn = zeroForOne\\n                ? SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioTargetX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    true\\n                )\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioTargetX96,\\n                    liquidity,\\n                    true\\n                );\\n            if (amountRemainingLessFee >= amountIn)\\n                sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    amountRemainingLessFee,\\n                    zeroForOne\\n                );\\n        } else {\\n            amountOut = zeroForOne\\n                ? SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioTargetX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    false\\n                )\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioTargetX96,\\n                    liquidity,\\n                    false\\n                );\\n            if (uint256(-amountRemaining) >= amountOut)\\n                sqrtRatioNextX96 = sqrtRatioTargetX96;\\n            else\\n                sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    uint256(-amountRemaining),\\n                    zeroForOne\\n                );\\n        }\\n\\n        bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\\n\\n        // get the input/output amounts\\n        if (zeroForOne) {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioNextX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    true\\n                );\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioNextX96,\\n                    sqrtRatioCurrentX96,\\n                    liquidity,\\n                    false\\n                );\\n        } else {\\n            amountIn = max && exactIn\\n                ? amountIn\\n                : SqrtPriceMath.getAmount1Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioNextX96,\\n                    liquidity,\\n                    true\\n                );\\n            amountOut = max && !exactIn\\n                ? amountOut\\n                : SqrtPriceMath.getAmount0Delta(\\n                    sqrtRatioCurrentX96,\\n                    sqrtRatioNextX96,\\n                    liquidity,\\n                    false\\n                );\\n        }\\n\\n        // cap the output amount to not exceed the remaining output amount\\n        if (!exactIn && amountOut > uint256(-amountRemaining)) {\\n            amountOut = uint256(-amountRemaining);\\n        }\\n\\n        if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\\n            // we didn't reach the target, so take the remainder of the maximum input as fee\\n            feeAmount = uint256(amountRemaining) - amountIn;\\n        } else {\\n            feeAmount = FullMath.mulDivRoundingUp(\\n                amountIn,\\n                feePips,\\n                1e6 - feePips\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ae21794cd9bd0f742a3f88ddcdbf22605466d6fbc1eb23cadf5a1feaa573b38\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\nimport {CustomRevert} from \\\"./CustomRevert.sol\\\";\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    using CustomRevert for bytes4;\\n\\n    /// @notice Thrown when the tick passed to #getSqrtPriceAtTick is not between MIN_TICK and MAX_TICK\\n    error InvalidTick(int24 tick);\\n    /// @notice Thrown when the price passed to #getTickAtSqrtPrice does not correspond to a price between MIN_TICK and MAX_TICK\\n    error InvalidSqrtPrice(uint160 sqrtPriceX96);\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**-128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtPriceAtTick computed from log base 1.0001 of 2**128\\n    /// @dev If ever MIN_TICK and MAX_TICK are not centered around 0, the absTick logic in getSqrtPriceAtTick cannot be used\\n    int24 internal constant MAX_TICK = 887272;\\n\\n    /// @dev The minimum tick spacing value drawn from the range of type int16 that is greater than 0, i.e. min from the range [1, 32767]\\n    int24 internal constant MIN_TICK_SPACING = 1;\\n    /// @dev The maximum tick spacing value drawn from the range of type int16, i.e. max from the range [1, 32767]\\n    int24 internal constant MAX_TICK_SPACING = type(int16).max;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_PRICE = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtPriceAtTick. Equivalent to getSqrtPriceAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_PRICE =\\n        1461446703485210103287273052203988822378723970342;\\n    /// @dev A threshold used for optimized bounds check, equals `MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1`\\n    uint160 internal constant MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE =\\n        1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\\n\\n    /// @notice Given a tickSpacing, compute the maximum usable tick\\n    function maxUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MAX_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Given a tickSpacing, compute the minimum usable tick\\n    function minUsableTick(int24 tickSpacing) internal pure returns (int24) {\\n        unchecked {\\n            return (MIN_TICK / tickSpacing) * tickSpacing;\\n        }\\n    }\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the price of the two assets (currency1/currency0)\\n    /// at the given tick\\n    function getSqrtPriceAtTick(\\n        int24 tick\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            uint256 absTick;\\n            assembly (\\\"memory-safe\\\") {\\n                tick := signextend(2, tick)\\n                // mask = 0 if tick >= 0 else -1 (all 1s)\\n                let mask := sar(255, tick)\\n                // if tick >= 0, |tick| = tick = 0 ^ tick\\n                // if tick < 0, |tick| = ~~|tick| = ~(-|tick| - 1) = ~(tick - 1) = (-1) ^ (tick - 1)\\n                // either way, |tick| = mask ^ (tick + mask)\\n                absTick := xor(mask, add(mask, tick))\\n            }\\n\\n            if (absTick > uint256(int256(MAX_TICK)))\\n                InvalidTick.selector.revertWith(tick);\\n\\n            // The tick is decomposed into bits, and for each bit with index i that is set, the product of 1/sqrt(1.0001^(2^i))\\n            // is calculated (using Q128.128). The constants used for this calculation are rounded to the nearest integer\\n\\n            // Equivalent to:\\n            //     price = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            //     or price = int(2**128 / sqrt(1.0001)) if (absTick & 0x1) else 1 << 128\\n            uint256 price;\\n            assembly (\\\"memory-safe\\\") {\\n                price := xor(\\n                    shl(128, 1),\\n                    mul(\\n                        xor(shl(128, 1), 0xfffcb933bd6fad37aa2d162d1a594001),\\n                        and(absTick, 0x1)\\n                    )\\n                )\\n            }\\n            if (absTick & 0x2 != 0)\\n                price = (price * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0)\\n                price = (price * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0)\\n                price = (price * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0)\\n                price = (price * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0)\\n                price = (price * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0)\\n                price = (price * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0)\\n                price = (price * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0)\\n                price = (price * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0)\\n                price = (price * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0)\\n                price = (price * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0)\\n                price = (price * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0)\\n                price = (price * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0)\\n                price = (price * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0)\\n                price = (price * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0)\\n                price = (price * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0)\\n                price = (price * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0)\\n                price = (price * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0)\\n                price = (price * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0)\\n                price = (price * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                // if (tick > 0) price = type(uint256).max / price;\\n                if sgt(tick, 0) {\\n                    price := div(not(0), price)\\n                }\\n\\n                // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n                // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n                // we round up in the division so getTickAtSqrtPrice of the output price is always consistent\\n                // `sub(shl(32, 1), 1)` is `type(uint32).max`\\n                // `price + type(uint32).max` will not overflow because `price` fits in 192 bits\\n                sqrtPriceX96 := shr(32, add(price, sub(shl(32, 1), 1)))\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getSqrtPriceAtTick(tick) <= sqrtPriceX96\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_PRICE, as MIN_SQRT_PRICE is the lowest value getSqrtPriceAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt price for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the getSqrtPriceAtTick(tick) is less than or equal to the input sqrtPriceX96\\n    function getTickAtSqrtPrice(\\n        uint160 sqrtPriceX96\\n    ) internal pure returns (int24 tick) {\\n        unchecked {\\n            // Equivalent: if (sqrtPriceX96 < MIN_SQRT_PRICE || sqrtPriceX96 >= MAX_SQRT_PRICE) revert InvalidSqrtPrice();\\n            // second inequality must be >= because the price can never reach the price at the max tick\\n            // if sqrtPriceX96 < MIN_SQRT_PRICE, the `sub` underflows and `gt` is true\\n            // if sqrtPriceX96 >= MAX_SQRT_PRICE, sqrtPriceX96 - MIN_SQRT_PRICE > MAX_SQRT_PRICE - MIN_SQRT_PRICE - 1\\n            if (\\n                (sqrtPriceX96 - MIN_SQRT_PRICE) >\\n                MAX_SQRT_PRICE_MINUS_MIN_SQRT_PRICE_MINUS_ONE\\n            ) {\\n                InvalidSqrtPrice.selector.revertWith(sqrtPriceX96);\\n            }\\n\\n            uint256 price = uint256(sqrtPriceX96) << 32;\\n\\n            uint256 r = price;\\n            uint256 msb = BitMath.mostSignificantBit(r);\\n\\n            if (msb >= 128) r = price >> (msb - 127);\\n            else r = price << (127 - msb);\\n\\n            int256 log_2 = (int256(msb) - 128) << 64;\\n\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(63, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(62, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(61, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(60, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(59, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(58, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(57, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(56, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(55, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(54, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(53, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(52, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(51, f))\\n                r := shr(f, r)\\n            }\\n            assembly (\\\"memory-safe\\\") {\\n                r := shr(127, mul(r, r))\\n                let f := shr(128, r)\\n                log_2 := or(log_2, shl(50, f))\\n            }\\n\\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // Q22.128 number\\n\\n            // Magic number represents the ceiling of the maximum value of the error when approximating log_sqrt10001(x)\\n            int24 tickLow = int24(\\n                (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n            );\\n\\n            // Magic number represents the minimum value of the error when approximating log_sqrt10001(x), when\\n            // sqrtPrice is from the range (2^-64, 2^64). This is safe as MIN_SQRT_PRICE is more than 2^-64. If MIN_SQRT_PRICE\\n            // is changed, this may need to be changed too\\n            int24 tickHi = int24(\\n                (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n            );\\n\\n            tick = tickLow == tickHi\\n                ? tickLow\\n                : getSqrtPriceAtTick(tickHi) <= sqrtPriceX96\\n                ? tickHi\\n                : tickLow;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88c11c5f3e6266a6d9433e76279615a8c1fc199d9e3d13b9c0b559f9b0b82097\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title TransferHelper\\n/// @notice Contains helper methods for interacting with ERC20 tokens that do not consistently return true/false\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Calls transfer on token contract, errors with TF if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TF\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xad06ee7e0514d77555783582bdec3a3d2d0b9c899b2e35b882d795fca38b878c\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f36d7d16348d8c37fe64fda932018d6e5e8acecd054f0f97d32db62d20c6c88\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061332a806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630c2d4e4e1461005157806371c54fc9146100815780638903573014610094578063974fb76e14610120575b600080fd5b61006461005f36600461063e565b610136565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f3660046106af565b61048f565b600280546003546004546100d8936001600160a01b039384169392831692821691600160a01b8104820b91600160b81b8204900b90600160d01b900462ffffff1686565b604080516001600160a01b03978816815295871660208701529390951692840192909252600290810b60608401520b608082015262ffffff90911660a082015260c001610078565b610128606481565b604051908152602001610078565b60006101428686610509565b60008061014f88886105d2565b6001600160a01b038083166000908152602081815260408083209385168352929052208054929450909250906064116101dd5760405162461bcd60e51b815260206004820152602560248201527f466163746f72793a20746f6f206d616e7920706f6f6c7320666f722074686973604482015264103830b4b960d91b60648201526084015b60405180910390fd5b6040805160c081018252308082526001600160a01b03868116602080850182905291871684860181905260028d810b60608701528c810b608087015262ffffff808d1660a090970187905281546001600160a01b03199081169096179091556003805490951690921790935560048054600160d01b90950262ffffff60d01b19838e16600160b81b021665ffffffffffff60b81b19938f16600160a01b026001600160b81b031990971690951795909517919091169290921792909217905590516000916102ea91869186918c918c918c91016001600160a01b039586168152939094166020840152600291820b6040840152900b606082015262ffffff91909116608082015260a00190565b60408051601f198184030181529181528151602092830120600081815260019093529120549091506001600160a01b0316156103685760405162461bcd60e51b815260206004820152601d60248201527f466163746f72793a6164647265737320616c726561647920657869737400000060448201526064016101d4565b8060405161037590610603565b8190604051809103906000f5905080158015610395573d6000803e3d6000fd5b50600082815260016020818152604080842080546001600160a01b03199081166001600160a01b038881169182179093558b8316808852878652848820938c16808952938652848820805497880181558852968590209095018054821686179055600280548216815560038054909216909155600480546001600160e81b0319169055885483519687529386019190915263ffffffff909216908401528b810b60608401528a900b608083015262ffffff891660a083015260c08201529095507fe026b1b60fa8f2d35cd0844432a7b513a5a112d8cfe2b30bc62c1c4b81373c759060e00160405180910390a15050505095945050505050565b600061049b8484610509565b6000806104a886866105d2565b6001600160a01b0380831660009081526020818152604080832093851683529290522080549294509092509063ffffffff86169081106104ea576104ea6106ff565b6000918252602090912001546001600160a01b03169695505050505050565b806001600160a01b0316826001600160a01b03160361056a5760405162461bcd60e51b815260206004820152601a60248201527f466163746f72793a206964656e746963616c206164647265737300000000000060448201526064016101d4565b6001600160a01b0382161580159061058a57506001600160a01b03811615155b6105ce5760405162461bcd60e51b8152602060048201526015602482015274466163746f72793a2061646472657373207a65726f60581b60448201526064016101d4565b5050565b600080826001600160a01b0316846001600160a01b0316106105f55782846105f8565b83835b915091509250929050565b612bdf8061071683390190565b80356001600160a01b038116811461062757600080fd5b919050565b8035600281900b811461062757600080fd5b600080600080600060a0868803121561065657600080fd5b61065f86610610565b945061066d60208701610610565b935061067b6040870161062c565b92506106896060870161062c565b9150608086013562ffffff811681146106a157600080fd5b809150509295509295909350565b6000806000606084860312156106c457600080fd5b6106cd84610610565b92506106db60208501610610565b9150604084013563ffffffff811681146106f457600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fdfe6101406040523480156200001257600080fd5b50336001600160a01b031663890357306040518163ffffffff1660e01b815260040160c060405180830381865afa15801562000052573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000789190620000dc565b62ffffff1660e052600290810b610100520b610120526001600160a01b0390811660c05290811660a0521660805262000168565b80516001600160a01b0381168114620000c457600080fd5b919050565b8051600281900b8114620000c457600080fd5b60008060008060008060c08789031215620000f657600080fd5b6200010187620000ac565b95506200011160208801620000ac565b94506200012160408801620000ac565b93506200013160608801620000c9565b92506200014160808801620000c9565b915060a087015162ffffff811681146200015a57600080fd5b809150509295509295509295565b60805160a05160c05160e05161010051610120516129a9620002366000396000818161034f0152818161061c0152818161118e0152611d100152600081816102a301528181610649015281816111c30152611cc301526000818161043701526106ec015260008181610410015281816109ca01528181610a0501528181610a8c01528181610ad301528181610c9d0152611af3015260008181610120015281816108af0152818161093601528181610c1101528181611aba0152611b19015260006103e901526129a96000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806360d49d53116100a2578063c45a015511610071578063c45a0155146103e4578063d21220a71461040b578063ddca3f4314610432578063f30583991461046d578063f637731d1461047657600080fd5b806360d49d53146103715780638db791d2146103a457806390bc1693146103be57806392f026ad146103d157600080fd5b80633eaf5d9f116100e95780633eaf5d9f14610267578063461413191461028757806355b812a81461029e57806355f57510146102c557806359c4f9051461034a57600080fd5b80630dfe16811461011b578063128acb081461015f57806316c19739146101875780631a6865021461023c575b600080fd5b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017261016d36600461259e565b61048b565b60408051928352602083019190915201610156565b610206610195366004612623565b6001600160a01b0316600090815260046020908152604091829020825160a08101845281546001600160801b03808216808452600160801b90920481169483018590526001840154169482018590526002830154606083018190526003909301546080909201829052949193909291565b604080516001600160801b039687168152602081019590955284019290925283166060830152909116608082015260a001610156565b60015461024f906001600160801b031681565b6040516001600160801b039091168152602001610156565b6000546102749060020b81565b60405160029190910b8152602001610156565b61029060035481565b604051908152602001610156565b6102747f000000000000000000000000000000000000000000000000000000000000000081565b6103116102d3366004612623565b60046020526000908152604090208054600182015460028301546003909301546001600160801b0380841694600160801b9094048116939216919085565b604080516001600160801b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610156565b6102747f000000000000000000000000000000000000000000000000000000000000000081565b61038461037f366004612657565b610b84565b604080516001600160801b03938416815292909116602083015201610156565b60005461014290630100000090046001600160a01b031681565b6101726103cc36600461269c565b610d6f565b6101726103df3660046126b7565b610f86565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6104597f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff9091168152602001610156565b61029060025481565b610489610484366004612623565b61111b565b005b600080856000036104e35760405162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f000060448201526064015b60405180910390fd5b8661052e576000546001600160a01b0363010000009091048116908616118015610529575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038616105b610560565b6000546001600160a01b036301000000909104811690861610801561056057506401000276a36001600160a01b038616115b6105ac5760405162461bcd60e51b815260206004820152601e60248201527f7371727450726963654c696d697458393620696e73756666696369656e74000060448201526064016104da565b60006040518060e0016040528088815260200160008152602001600060039054906101000a90046001600160a01b03166001600160a01b03168152602001896105f7576003546105fb565b6002545b815260200160008152602001600081526020016000815250905060006106407f0000000000000000000000000000000000000000000000000000000000000000611294565b9050600061066d7f0000000000000000000000000000000000000000000000000000000000000000611294565b905060008a1561069f57886001600160a01b0316836001600160a01b0316106106965782610698565b885b90506106c3565b886001600160a01b0316826001600160a01b0316116106be57816106c0565b885b90505b60005460015461071091630100000090046001600160a01b03169083906001600160801b03168d7f000000000000000000000000000000000000000000000000000000000000000061154f565b60c088015260a087015260808601526001600160a01b031660408501819052600080546301000000600160b81b031916630100000083021790556107539061176a565b6000805462ffffff191662ffffff9290921691909117905560c084015160015461078c9190600160801b906001600160801b03166119fc565b8460600181815161079d9190612730565b9052508a156107b35760608401516002556107bc565b60608401516003555b60008a13801561081b576107e28560c0015186608001516107dd9190612730565b611a9f565b855186906107f1908390612743565b90525060a085015161080290611a9f565b856020018181516108139190612743565b905250610866565b6108288560a00151611a9f565b8551869061083790839061276a565b90525060c08501516080860151610851916107dd91612730565b85602001818151610862919061276a565b9052505b8015158c15150361088b57845161087d908c612743565b9650846020015195506108a2565b6020850151855190975061089f908c612743565b95505b8b156109fe5760006108d37f0000000000000000000000000000000000000000000000000000000000000000611ab5565b604051637d241f3960e11b8152909150339063fa483e72906108ff908b908b908f908f906004016127bb565b600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b5050505061095a7f0000000000000000000000000000000000000000000000000000000000000000611ab5565b6109648983612730565b11156109bc5760405162461bcd60e51b815260206004820152602160248201527f506f6f6c20737761703a77726f6e672062616c616e6365206f6620746f6b656e6044820152600360fc1b60648201526084016104da565b60008712156109f8576109f87f00000000000000000000000000000000000000000000000000000000000000008f6109f38a6127e5565b611ba4565b50610afe565b6000610a297f0000000000000000000000000000000000000000000000000000000000000000611ab5565b604051637d241f3960e11b8152909150339063fa483e7290610a55908b908b908f908f906004016127bb565b600060405180830381600087803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b50505050610ab07f0000000000000000000000000000000000000000000000000000000000000000611ab5565b610aba8883612730565b1115610ac557600080fd5b6000881215610afc57610afc7f00000000000000000000000000000000000000000000000000000000000000008f6109f38b6127e5565b505b600054600154604080518a8152602081018a9052630100000084046001600160a01b03908116828401526001600160801b03909316606082015260029390930b608084015251908f169133917fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca679181900360a00190a35050505050965096945050505050565b33600090815260046020526040812080548291906001600160801b03600160801b909104811690861611610bb85784610bcb565b8054600160801b90046001600160801b03165b60018201549093506001600160801b0390811690851611610bec5783610bfb565b60018101546001600160801b03165b91506001600160801b03831615610c8957610c407f000000000000000000000000000000000000000000000000000000000000000087856001600160801b0316611ba4565b805483908290601090610c64908490600160801b90046001600160801b0316612801565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6001600160801b03821615610d1157610ccc7f000000000000000000000000000000000000000000000000000000000000000087846001600160801b0316611ba4565b600181018054839190600090610cec9084906001600160801b0316612801565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b604080516001600160a01b03881681526001600160801b038581166020830152841681830152905133917f38c069c2e9bc192f8cf4f1b85be791ccc0d04bb12c4ca71a3fbfe96ea0932dd5919081900360600190a250935093915050565b6000806000836001600160801b031611610dcb5760405162461bcd60e51b815260206004820152601e60248201527f5f616d6f756e74206d7573742067726561746572207468616e207a65726f000060448201526064016104da565b336000908152600460205260409020546001600160801b039081169084161115610e2e5760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b60448201526064016104da565b60006040518060400160405280336001600160a01b0316815260200185610e5490612821565b600f0b90529050600080610e6783611ca4565b9150915081610e75906127e5565b9450610e80816127e5565b93506000851180610e915750600084115b15610f32573360009081526004602052604090208054869190601090610ec8908490600160801b90046001600160801b0316612850565b82546101009290920a6001600160801b0381810219909316918316021790915533600090815260046020526040812060010180548894509092610f0d91859116612850565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b604080516001600160801b03881681526020810187905290810185905233907fd4885a46e0c2f00ffdf2adb97a3909fd129dc1acccead462f7e29e6f18e54ec19060600160405180910390a2505050915091565b60008060006040518060400160405280886001600160a01b0316815260200187600f0b8152509050600080610fba83611ca4565b91509150600082136110075760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7430496e74206973206e6567617469766560501b60448201526064016104da565b600081136110505760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7431496e74206973206e6567617469766560501b60448201526064016104da565b604051639f382e9b60e01b81529194509250839083903390639f382e9b9061108290859085908c908c906004016127bb565b600060405180830381600087803b15801561109c57600080fd5b505af11580156110b0573d6000803e3d6000fd5b5050604080513381526001600160801b038c166020820152908101889052606081018790526001600160a01b038c1692507f011d4be6213866bff035f68967364cf69c5c01ff5bc23ff0a275f08a04381e6a915060800160405180910390a250505094509492505050565b600054630100000090046001600160a01b0316156111695760405162461bcd60e51b815260206004820152600b60248201526a125392551250531256915160aa1b60448201526064016104da565b6111728161176a565b6000805462ffffff191662ffffff9290921691909117908190557f0000000000000000000000000000000000000000000000000000000000000000600290810b91900b128015906111ec57506000547f0000000000000000000000000000000000000000000000000000000000000000600290810b91900b125b6112685760405162461bcd60e51b815260206004820152604160248201527f7371727450726963655839362073686f756c642062652077697468696e20746860448201527f652072616e6765206f66205b7469636b4c6f7765722c207469636b55707065726064820152602960f81b608482015260a4016104da565b600080546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b60020b600060ff82901d80830118620d89e88111156112be576112be6345c3193d60e11b84611ef0565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b1860028216156112fa576ffff97272373d413259a46990580e213a0260801c5b6004821615611319576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611338576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611357576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611376576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611395576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156113b4576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156113d4576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156113f4576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611414576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611434576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611454576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611474576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611494576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156114b4576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156114d5576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156114f5576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611514576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611531576b048a170391f7dc42444e8fa20260801c5b600084131561153f57600019045b63ffffffff0160201c9392505050565b60008080806001600160a01b03808916908a1610158187128015906115db57600061158f896115818a620f4240612870565b62ffffff16620f42406119fc565b9050826115a8576115a38c8c8c6001611f01565b6115b5565b6115b58b8d8c6001611f8a565b95508581106115c6578a96506115d5565b6115d28c8b8386612051565b96505b5061162f565b816115f2576115ed8b8b8b6000611f8a565b6115ff565b6115ff8a8c8b6000611f01565b93508361160b896127e5565b106116185789955061162f565b61162c8b8a6116268b6127e5565b8561209d565b95505b6001600160a01b038a81169087161482156116925780801561164e5750815b6116645761165f878d8c6001611f8a565b611666565b855b9550808015611673575081155b61168957611684878d8c6000611f01565b61168b565b845b94506116dc565b80801561169c5750815b6116b2576116ad8c888c6001611f01565b6116b4565b855b95508080156116c1575081155b6116d7576116d28c888c6000611f8a565b6116d9565b845b94505b811580156116f157506116ee896127e5565b85115b15611702576116ff896127e5565b94505b81801561172157508a6001600160a01b0316876001600160a01b031614155b1561173757611730868a61288c565b935061175b565b6117588662ffffff8a1661174e8b620f4240612870565b62ffffff166120e9565b93505b50505095509550955095915050565b600073fffd8963efd1fc6a506488495d951d51639616826401000276a21983016001600160a01b031611156117aa576117aa6318521d4960e21b8361211b565b640100000000600160c01b03602083901b168060006117c882612132565b60ff169050608081106117e357607f810383901c91506117ed565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b146119ed57886001600160a01b03166119d282611294565b6001600160a01b031611156119e757816119ef565b806119ef565b815b9998505050505050505050565b60008383028160001985870982811083820303915050808411611a1e57600080fd5b80600003611a3157508290049050611a98565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6000600160ff1b8210611ab157600080fd5b5090565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614611b17577f0000000000000000000000000000000000000000000000000000000000000000611b39565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a98919061289f565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611c0091906128b8565b6000604051808303816000865af19150503d8060008114611c3d576040519150601f19603f3d011682016040523d82523d6000602084013e611c42565b606091505b5091509150818015611c6c575080511580611c6c575080806020019051810190611c6c91906128e7565b611c9d5760405162461bcd60e51b81526020600482015260026024820152612a2360f11b60448201526064016104da565b5050505050565b600080548190611cf190630100000090046001600160a01b0316611ce77f0000000000000000000000000000000000000000000000000000000000000000611294565b85602001516121bf565b600054909250611d3e90630100000090046001600160a01b0316611d347f0000000000000000000000000000000000000000000000000000000000000000611294565b8560200151612201565b83516001600160a01b0316600090815260046020526040812060028082015490549394509092611d8691611d719161288c565b83546001600160801b0316600160801b6119fc565b90506000611db48360030154600354611d9f919061288c565b84546001600160801b0316600160801b6119fc565b600280549085015560038054908501556001546020880151919250611de4916001600160801b0390911690612235565b600180546001600160801b0319166001600160801b039283161790558216151580611e1857506000816001600160801b0316115b15611eb057825482908490601090611e41908490600160801b90046001600160801b0316612850565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550808360010160008282829054906101000a90046001600160801b0316611e8b9190612850565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b82546020870151611eca916001600160801b031690612235565b83546001600160801b0319166001600160801b0391909116179092555091939092509050565b816000528060020b60045260246000fd5b6000836001600160a01b0316856001600160a01b03161115611f21579293925b81611f5557611f506001600160801b038416611f3d8787612904565b6001600160a01b0316600160601b6119fc565b611f7f565b611f7f6001600160801b038416611f6c8787612904565b6001600160a01b0316600160601b6120e9565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115611faa579293925b600160601b600160e01b03606084901b166000611fc78787612904565b6001600160a01b031690506000876001600160a01b031611611fe857600080fd5b8361201a57866001600160a01b031661200b8383896001600160a01b03166119fc565b612015919061293a565b612046565b6120466120318383896001600160a01b03166120e9565b886001600160a01b0316808204910615150190565b979650505050505050565b600080856001600160a01b03161161206857600080fd5b6000846001600160801b03161161207e57600080fd5b8161209057611f5085858560016122fb565b611f7f85858560016123e2565b600080856001600160a01b0316116120b457600080fd5b6000846001600160801b0316116120ca57600080fd5b816120dc57611f5085858560006123e2565b611f7f85858560006122fb565b60006120f68484846119fc565b9050818061210657612106612924565b83850915611a985760010180611a9857600080fd5b816000526001600160a01b03811660045260246000fd5b600080821161214057600080fd5b507f0706060506020500060203020504000106050205030304010505030400000000601f6f8421084210842108cc6318c6db6d54be6001600160801b03841160071b84811c67ffffffffffffffff1060061b1784811c63ffffffff1060051b1784811c61ffff1060041b1784811c60ff1060031b1793841c1c161a1790565b60008082600f0b126121e0576121db6107dd8585856001611f8a565b611f82565b6121f86107dd85856121f186612821565b6000611f8a565b611f82906127e5565b60008082600f0b1261221d576121db6107dd8585856001611f01565b6121f86107dd858561222e86612821565b6000611f01565b60008082600f0b12156122a2576001600160801b03831661225583612821565b61225f9085612801565b9150816001600160801b03161061229d5760405162461bcd60e51b81526020600482015260026024820152614c5360f01b60448201526064016104da565b6122f5565b6001600160801b0383166122b68385612850565b9150816001600160801b031610156122f55760405162461bcd60e51b81526020600482015260026024820152614c4160f01b60448201526064016104da565b92915050565b6000811561236d5760006001600160a01b038411156123315761232c84600160601b876001600160801b03166119fc565b612348565b6123486001600160801b038616606086901b61293a565b90506123656123606001600160a01b038816836124f9565b612514565b915050611f82565b60006001600160a01b0384111561239b5761239684600160601b876001600160801b03166120e9565b6123b8565b6123b8606085901b6001600160801b038716808204910615150190565b905080866001600160a01b0316116123cf57600080fd5b612365816001600160a01b03881661288c565b6000826000036123f3575083611f82565b600160601b600160e01b03606085901b16821561249c5760006001600160a01b03871685612421828261295c565b925061242d908361293a565b0361246757600061243e8284612730565b90508281106124655761245b83896001600160a01b0316836120e9565b9350505050611f82565b505b61249382612488876124826001600160a01b038c168461293a565b906124f9565b808204910615150190565b92505050611f82565b60006001600160a01b038716856124b3828261295c565b92506124bf908361293a565b1480156124cb57508082115b6124d457600080fd5b60006124e0828461288c565b905061245b612360848a6001600160a01b0316846120e9565b6000826125068382612730565b91508110156122f557600080fd5b806001600160a01b038116811461252a57600080fd5b919050565b6001600160a01b038116811461254457600080fd5b50565b801515811461254457600080fd5b60008083601f84011261256757600080fd5b50813567ffffffffffffffff81111561257f57600080fd5b60208301915083602082850101111561259757600080fd5b9250929050565b60008060008060008060a087890312156125b757600080fd5b86356125c28161252f565b955060208701356125d281612547565b94506040870135935060608701356125e98161252f565b9250608087013567ffffffffffffffff81111561260557600080fd5b61261189828a01612555565b979a9699509497509295939492505050565b60006020828403121561263557600080fd5b8135611a988161252f565b80356001600160801b038116811461252a57600080fd5b60008060006060848603121561266c57600080fd5b83356126778161252f565b925061268560208501612640565b915061269360408501612640565b90509250925092565b6000602082840312156126ae57600080fd5b611a9882612640565b600080600080606085870312156126cd57600080fd5b84356126d88161252f565b93506126e660208601612640565b9250604085013567ffffffffffffffff81111561270257600080fd5b61270e87828801612555565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156122f5576122f561271a565b81810360008312801583831316838312821617156127635761276361271a565b5092915050565b808201828112600083128015821682158216171561278a5761278a61271a565b505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8481528360208201526060604082015260006127db606083018486612792565b9695505050505050565b6000600160ff1b82016127fa576127fa61271a565b5060000390565b6001600160801b038281168282160390808211156127635761276361271a565b600081600f0b6f7fffffffffffffffffffffffffffffff1981036128475761284761271a565b60000392915050565b6001600160801b038181168382160190808211156127635761276361271a565b62ffffff8281168282160390808211156127635761276361271a565b818103818111156122f5576122f561271a565b6000602082840312156128b157600080fd5b5051919050565b6000825160005b818110156128d957602081860181015185830152016128bf565b506000920191825250919050565b6000602082840312156128f957600080fd5b8151611a9881612547565b6001600160a01b038281168282160390808211156127635761276361271a565b634e487b7160e01b600052601260045260246000fd5b60008261295757634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176122f5576122f561271a56fea26469706673582212208e282ee879b6d6ef813a81d0e74cac5e2e0935c739eca51dff6e969907c2f4a764736f6c63430008180033a2646970667358221220154645584371ce5beac9bd7616d635013f6a83ad3ffaefa17b7b09b60c00f39064736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630c2d4e4e1461005157806371c54fc9146100815780638903573014610094578063974fb76e14610120575b600080fd5b61006461005f36600461063e565b610136565b6040516001600160a01b0390911681526020015b60405180910390f35b61006461008f3660046106af565b61048f565b600280546003546004546100d8936001600160a01b039384169392831692821691600160a01b8104820b91600160b81b8204900b90600160d01b900462ffffff1686565b604080516001600160a01b03978816815295871660208701529390951692840192909252600290810b60608401520b608082015262ffffff90911660a082015260c001610078565b610128606481565b604051908152602001610078565b60006101428686610509565b60008061014f88886105d2565b6001600160a01b038083166000908152602081815260408083209385168352929052208054929450909250906064116101dd5760405162461bcd60e51b815260206004820152602560248201527f466163746f72793a20746f6f206d616e7920706f6f6c7320666f722074686973604482015264103830b4b960d91b60648201526084015b60405180910390fd5b6040805160c081018252308082526001600160a01b03868116602080850182905291871684860181905260028d810b60608701528c810b608087015262ffffff808d1660a090970187905281546001600160a01b03199081169096179091556003805490951690921790935560048054600160d01b90950262ffffff60d01b19838e16600160b81b021665ffffffffffff60b81b19938f16600160a01b026001600160b81b031990971690951795909517919091169290921792909217905590516000916102ea91869186918c918c918c91016001600160a01b039586168152939094166020840152600291820b6040840152900b606082015262ffffff91909116608082015260a00190565b60408051601f198184030181529181528151602092830120600081815260019093529120549091506001600160a01b0316156103685760405162461bcd60e51b815260206004820152601d60248201527f466163746f72793a6164647265737320616c726561647920657869737400000060448201526064016101d4565b8060405161037590610603565b8190604051809103906000f5905080158015610395573d6000803e3d6000fd5b50600082815260016020818152604080842080546001600160a01b03199081166001600160a01b038881169182179093558b8316808852878652848820938c16808952938652848820805497880181558852968590209095018054821686179055600280548216815560038054909216909155600480546001600160e81b0319169055885483519687529386019190915263ffffffff909216908401528b810b60608401528a900b608083015262ffffff891660a083015260c08201529095507fe026b1b60fa8f2d35cd0844432a7b513a5a112d8cfe2b30bc62c1c4b81373c759060e00160405180910390a15050505095945050505050565b600061049b8484610509565b6000806104a886866105d2565b6001600160a01b0380831660009081526020818152604080832093851683529290522080549294509092509063ffffffff86169081106104ea576104ea6106ff565b6000918252602090912001546001600160a01b03169695505050505050565b806001600160a01b0316826001600160a01b03160361056a5760405162461bcd60e51b815260206004820152601a60248201527f466163746f72793a206964656e746963616c206164647265737300000000000060448201526064016101d4565b6001600160a01b0382161580159061058a57506001600160a01b03811615155b6105ce5760405162461bcd60e51b8152602060048201526015602482015274466163746f72793a2061646472657373207a65726f60581b60448201526064016101d4565b5050565b600080826001600160a01b0316846001600160a01b0316106105f55782846105f8565b83835b915091509250929050565b612bdf8061071683390190565b80356001600160a01b038116811461062757600080fd5b919050565b8035600281900b811461062757600080fd5b600080600080600060a0868803121561065657600080fd5b61065f86610610565b945061066d60208701610610565b935061067b6040870161062c565b92506106896060870161062c565b9150608086013562ffffff811681146106a157600080fd5b809150509295509295909350565b6000806000606084860312156106c457600080fd5b6106cd84610610565b92506106db60208501610610565b9150604084013563ffffffff811681146106f457600080fd5b809150509250925092565b634e487b7160e01b600052603260045260246000fdfe6101406040523480156200001257600080fd5b50336001600160a01b031663890357306040518163ffffffff1660e01b815260040160c060405180830381865afa15801562000052573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000789190620000dc565b62ffffff1660e052600290810b610100520b610120526001600160a01b0390811660c05290811660a0521660805262000168565b80516001600160a01b0381168114620000c457600080fd5b919050565b8051600281900b8114620000c457600080fd5b60008060008060008060c08789031215620000f657600080fd5b6200010187620000ac565b95506200011160208801620000ac565b94506200012160408801620000ac565b93506200013160608801620000c9565b92506200014160808801620000c9565b915060a087015162ffffff811681146200015a57600080fd5b809150509295509295509295565b60805160a05160c05160e05161010051610120516129a9620002366000396000818161034f0152818161061c0152818161118e0152611d100152600081816102a301528181610649015281816111c30152611cc301526000818161043701526106ec015260008181610410015281816109ca01528181610a0501528181610a8c01528181610ad301528181610c9d0152611af3015260008181610120015281816108af0152818161093601528181610c1101528181611aba0152611b19015260006103e901526129a96000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806360d49d53116100a2578063c45a015511610071578063c45a0155146103e4578063d21220a71461040b578063ddca3f4314610432578063f30583991461046d578063f637731d1461047657600080fd5b806360d49d53146103715780638db791d2146103a457806390bc1693146103be57806392f026ad146103d157600080fd5b80633eaf5d9f116100e95780633eaf5d9f14610267578063461413191461028757806355b812a81461029e57806355f57510146102c557806359c4f9051461034a57600080fd5b80630dfe16811461011b578063128acb081461015f57806316c19739146101875780631a6865021461023c575b600080fd5b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61017261016d36600461259e565b61048b565b60408051928352602083019190915201610156565b610206610195366004612623565b6001600160a01b0316600090815260046020908152604091829020825160a08101845281546001600160801b03808216808452600160801b90920481169483018590526001840154169482018590526002830154606083018190526003909301546080909201829052949193909291565b604080516001600160801b039687168152602081019590955284019290925283166060830152909116608082015260a001610156565b60015461024f906001600160801b031681565b6040516001600160801b039091168152602001610156565b6000546102749060020b81565b60405160029190910b8152602001610156565b61029060035481565b604051908152602001610156565b6102747f000000000000000000000000000000000000000000000000000000000000000081565b6103116102d3366004612623565b60046020526000908152604090208054600182015460028301546003909301546001600160801b0380841694600160801b9094048116939216919085565b604080516001600160801b039687168152948616602086015292909416918301919091526060820152608081019190915260a001610156565b6102747f000000000000000000000000000000000000000000000000000000000000000081565b61038461037f366004612657565b610b84565b604080516001600160801b03938416815292909116602083015201610156565b60005461014290630100000090046001600160a01b031681565b6101726103cc36600461269c565b610d6f565b6101726103df3660046126b7565b610f86565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6101427f000000000000000000000000000000000000000000000000000000000000000081565b6104597f000000000000000000000000000000000000000000000000000000000000000081565b60405162ffffff9091168152602001610156565b61029060025481565b610489610484366004612623565b61111b565b005b600080856000036104e35760405162461bcd60e51b815260206004820152601e60248201527f616d6f756e745370656369666965642063616e6e6f74206265207a65726f000060448201526064015b60405180910390fd5b8661052e576000546001600160a01b0363010000009091048116908616118015610529575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b038616105b610560565b6000546001600160a01b036301000000909104811690861610801561056057506401000276a36001600160a01b038616115b6105ac5760405162461bcd60e51b815260206004820152601e60248201527f7371727450726963654c696d697458393620696e73756666696369656e74000060448201526064016104da565b60006040518060e0016040528088815260200160008152602001600060039054906101000a90046001600160a01b03166001600160a01b03168152602001896105f7576003546105fb565b6002545b815260200160008152602001600081526020016000815250905060006106407f0000000000000000000000000000000000000000000000000000000000000000611294565b9050600061066d7f0000000000000000000000000000000000000000000000000000000000000000611294565b905060008a1561069f57886001600160a01b0316836001600160a01b0316106106965782610698565b885b90506106c3565b886001600160a01b0316826001600160a01b0316116106be57816106c0565b885b90505b60005460015461071091630100000090046001600160a01b03169083906001600160801b03168d7f000000000000000000000000000000000000000000000000000000000000000061154f565b60c088015260a087015260808601526001600160a01b031660408501819052600080546301000000600160b81b031916630100000083021790556107539061176a565b6000805462ffffff191662ffffff9290921691909117905560c084015160015461078c9190600160801b906001600160801b03166119fc565b8460600181815161079d9190612730565b9052508a156107b35760608401516002556107bc565b60608401516003555b60008a13801561081b576107e28560c0015186608001516107dd9190612730565b611a9f565b855186906107f1908390612743565b90525060a085015161080290611a9f565b856020018181516108139190612743565b905250610866565b6108288560a00151611a9f565b8551869061083790839061276a565b90525060c08501516080860151610851916107dd91612730565b85602001818151610862919061276a565b9052505b8015158c15150361088b57845161087d908c612743565b9650846020015195506108a2565b6020850151855190975061089f908c612743565b95505b8b156109fe5760006108d37f0000000000000000000000000000000000000000000000000000000000000000611ab5565b604051637d241f3960e11b8152909150339063fa483e72906108ff908b908b908f908f906004016127bb565b600060405180830381600087803b15801561091957600080fd5b505af115801561092d573d6000803e3d6000fd5b5050505061095a7f0000000000000000000000000000000000000000000000000000000000000000611ab5565b6109648983612730565b11156109bc5760405162461bcd60e51b815260206004820152602160248201527f506f6f6c20737761703a77726f6e672062616c616e6365206f6620746f6b656e6044820152600360fc1b60648201526084016104da565b60008712156109f8576109f87f00000000000000000000000000000000000000000000000000000000000000008f6109f38a6127e5565b611ba4565b50610afe565b6000610a297f0000000000000000000000000000000000000000000000000000000000000000611ab5565b604051637d241f3960e11b8152909150339063fa483e7290610a55908b908b908f908f906004016127bb565b600060405180830381600087803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b50505050610ab07f0000000000000000000000000000000000000000000000000000000000000000611ab5565b610aba8883612730565b1115610ac557600080fd5b6000881215610afc57610afc7f00000000000000000000000000000000000000000000000000000000000000008f6109f38b6127e5565b505b600054600154604080518a8152602081018a9052630100000084046001600160a01b03908116828401526001600160801b03909316606082015260029390930b608084015251908f169133917fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca679181900360a00190a35050505050965096945050505050565b33600090815260046020526040812080548291906001600160801b03600160801b909104811690861611610bb85784610bcb565b8054600160801b90046001600160801b03165b60018201549093506001600160801b0390811690851611610bec5783610bfb565b60018101546001600160801b03165b91506001600160801b03831615610c8957610c407f000000000000000000000000000000000000000000000000000000000000000087856001600160801b0316611ba4565b805483908290601090610c64908490600160801b90046001600160801b0316612801565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b6001600160801b03821615610d1157610ccc7f000000000000000000000000000000000000000000000000000000000000000087846001600160801b0316611ba4565b600181018054839190600090610cec9084906001600160801b0316612801565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b604080516001600160a01b03881681526001600160801b038581166020830152841681830152905133917f38c069c2e9bc192f8cf4f1b85be791ccc0d04bb12c4ca71a3fbfe96ea0932dd5919081900360600190a250935093915050565b6000806000836001600160801b031611610dcb5760405162461bcd60e51b815260206004820152601e60248201527f5f616d6f756e74206d7573742067726561746572207468616e207a65726f000060448201526064016104da565b336000908152600460205260409020546001600160801b039081169084161115610e2e5760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b60448201526064016104da565b60006040518060400160405280336001600160a01b0316815260200185610e5490612821565b600f0b90529050600080610e6783611ca4565b9150915081610e75906127e5565b9450610e80816127e5565b93506000851180610e915750600084115b15610f32573360009081526004602052604090208054869190601090610ec8908490600160801b90046001600160801b0316612850565b82546101009290920a6001600160801b0381810219909316918316021790915533600090815260046020526040812060010180548894509092610f0d91859116612850565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b604080516001600160801b03881681526020810187905290810185905233907fd4885a46e0c2f00ffdf2adb97a3909fd129dc1acccead462f7e29e6f18e54ec19060600160405180910390a2505050915091565b60008060006040518060400160405280886001600160a01b0316815260200187600f0b8152509050600080610fba83611ca4565b91509150600082136110075760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7430496e74206973206e6567617469766560501b60448201526064016104da565b600081136110505760405162461bcd60e51b8152602060048201526016602482015275616d6f756e7431496e74206973206e6567617469766560501b60448201526064016104da565b604051639f382e9b60e01b81529194509250839083903390639f382e9b9061108290859085908c908c906004016127bb565b600060405180830381600087803b15801561109c57600080fd5b505af11580156110b0573d6000803e3d6000fd5b5050604080513381526001600160801b038c166020820152908101889052606081018790526001600160a01b038c1692507f011d4be6213866bff035f68967364cf69c5c01ff5bc23ff0a275f08a04381e6a915060800160405180910390a250505094509492505050565b600054630100000090046001600160a01b0316156111695760405162461bcd60e51b815260206004820152600b60248201526a125392551250531256915160aa1b60448201526064016104da565b6111728161176a565b6000805462ffffff191662ffffff9290921691909117908190557f0000000000000000000000000000000000000000000000000000000000000000600290810b91900b128015906111ec57506000547f0000000000000000000000000000000000000000000000000000000000000000600290810b91900b125b6112685760405162461bcd60e51b815260206004820152604160248201527f7371727450726963655839362073686f756c642062652077697468696e20746860448201527f652072616e6765206f66205b7469636b4c6f7765722c207469636b55707065726064820152602960f81b608482015260a4016104da565b600080546001600160a01b039092166301000000026301000000600160b81b0319909216919091179055565b60020b600060ff82901d80830118620d89e88111156112be576112be6345c3193d60e11b84611ef0565b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b1860028216156112fa576ffff97272373d413259a46990580e213a0260801c5b6004821615611319576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615611338576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615611357576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615611376576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615611395576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156113b4576ffe5dee046a99a2a811c461f1969c30530260801c5b6101008216156113d4576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b6102008216156113f4576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615611414576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615611434576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615611454576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615611474576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615611494576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156114b4576f31be135f97d08fd981231505542fcfa60260801c5b620100008216156114d5576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b620200008216156114f5576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615611514576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615611531576b048a170391f7dc42444e8fa20260801c5b600084131561153f57600019045b63ffffffff0160201c9392505050565b60008080806001600160a01b03808916908a1610158187128015906115db57600061158f896115818a620f4240612870565b62ffffff16620f42406119fc565b9050826115a8576115a38c8c8c6001611f01565b6115b5565b6115b58b8d8c6001611f8a565b95508581106115c6578a96506115d5565b6115d28c8b8386612051565b96505b5061162f565b816115f2576115ed8b8b8b6000611f8a565b6115ff565b6115ff8a8c8b6000611f01565b93508361160b896127e5565b106116185789955061162f565b61162c8b8a6116268b6127e5565b8561209d565b95505b6001600160a01b038a81169087161482156116925780801561164e5750815b6116645761165f878d8c6001611f8a565b611666565b855b9550808015611673575081155b61168957611684878d8c6000611f01565b61168b565b845b94506116dc565b80801561169c5750815b6116b2576116ad8c888c6001611f01565b6116b4565b855b95508080156116c1575081155b6116d7576116d28c888c6000611f8a565b6116d9565b845b94505b811580156116f157506116ee896127e5565b85115b15611702576116ff896127e5565b94505b81801561172157508a6001600160a01b0316876001600160a01b031614155b1561173757611730868a61288c565b935061175b565b6117588662ffffff8a1661174e8b620f4240612870565b62ffffff166120e9565b93505b50505095509550955095915050565b600073fffd8963efd1fc6a506488495d951d51639616826401000276a21983016001600160a01b031611156117aa576117aa6318521d4960e21b8361211b565b640100000000600160c01b03602083901b168060006117c882612132565b60ff169050608081106117e357607f810383901c91506117ed565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d607f198f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581026f028f6481ab7f045a5af012a19d003aa9198101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b146119ed57886001600160a01b03166119d282611294565b6001600160a01b031611156119e757816119ef565b806119ef565b815b9998505050505050505050565b60008383028160001985870982811083820303915050808411611a1e57600080fd5b80600003611a3157508290049050611a98565b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6000600160ff1b8210611ab157600080fd5b5090565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614611b17577f0000000000000000000000000000000000000000000000000000000000000000611b39565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a98919061289f565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611c0091906128b8565b6000604051808303816000865af19150503d8060008114611c3d576040519150601f19603f3d011682016040523d82523d6000602084013e611c42565b606091505b5091509150818015611c6c575080511580611c6c575080806020019051810190611c6c91906128e7565b611c9d5760405162461bcd60e51b81526020600482015260026024820152612a2360f11b60448201526064016104da565b5050505050565b600080548190611cf190630100000090046001600160a01b0316611ce77f0000000000000000000000000000000000000000000000000000000000000000611294565b85602001516121bf565b600054909250611d3e90630100000090046001600160a01b0316611d347f0000000000000000000000000000000000000000000000000000000000000000611294565b8560200151612201565b83516001600160a01b0316600090815260046020526040812060028082015490549394509092611d8691611d719161288c565b83546001600160801b0316600160801b6119fc565b90506000611db48360030154600354611d9f919061288c565b84546001600160801b0316600160801b6119fc565b600280549085015560038054908501556001546020880151919250611de4916001600160801b0390911690612235565b600180546001600160801b0319166001600160801b039283161790558216151580611e1857506000816001600160801b0316115b15611eb057825482908490601090611e41908490600160801b90046001600160801b0316612850565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550808360010160008282829054906101000a90046001600160801b0316611e8b9190612850565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505b82546020870151611eca916001600160801b031690612235565b83546001600160801b0319166001600160801b0391909116179092555091939092509050565b816000528060020b60045260246000fd5b6000836001600160a01b0316856001600160a01b03161115611f21579293925b81611f5557611f506001600160801b038416611f3d8787612904565b6001600160a01b0316600160601b6119fc565b611f7f565b611f7f6001600160801b038416611f6c8787612904565b6001600160a01b0316600160601b6120e9565b90505b949350505050565b6000836001600160a01b0316856001600160a01b03161115611faa579293925b600160601b600160e01b03606084901b166000611fc78787612904565b6001600160a01b031690506000876001600160a01b031611611fe857600080fd5b8361201a57866001600160a01b031661200b8383896001600160a01b03166119fc565b612015919061293a565b612046565b6120466120318383896001600160a01b03166120e9565b886001600160a01b0316808204910615150190565b979650505050505050565b600080856001600160a01b03161161206857600080fd5b6000846001600160801b03161161207e57600080fd5b8161209057611f5085858560016122fb565b611f7f85858560016123e2565b600080856001600160a01b0316116120b457600080fd5b6000846001600160801b0316116120ca57600080fd5b816120dc57611f5085858560006123e2565b611f7f85858560006122fb565b60006120f68484846119fc565b9050818061210657612106612924565b83850915611a985760010180611a9857600080fd5b816000526001600160a01b03811660045260246000fd5b600080821161214057600080fd5b507f0706060506020500060203020504000106050205030304010505030400000000601f6f8421084210842108cc6318c6db6d54be6001600160801b03841160071b84811c67ffffffffffffffff1060061b1784811c63ffffffff1060051b1784811c61ffff1060041b1784811c60ff1060031b1793841c1c161a1790565b60008082600f0b126121e0576121db6107dd8585856001611f8a565b611f82565b6121f86107dd85856121f186612821565b6000611f8a565b611f82906127e5565b60008082600f0b1261221d576121db6107dd8585856001611f01565b6121f86107dd858561222e86612821565b6000611f01565b60008082600f0b12156122a2576001600160801b03831661225583612821565b61225f9085612801565b9150816001600160801b03161061229d5760405162461bcd60e51b81526020600482015260026024820152614c5360f01b60448201526064016104da565b6122f5565b6001600160801b0383166122b68385612850565b9150816001600160801b031610156122f55760405162461bcd60e51b81526020600482015260026024820152614c4160f01b60448201526064016104da565b92915050565b6000811561236d5760006001600160a01b038411156123315761232c84600160601b876001600160801b03166119fc565b612348565b6123486001600160801b038616606086901b61293a565b90506123656123606001600160a01b038816836124f9565b612514565b915050611f82565b60006001600160a01b0384111561239b5761239684600160601b876001600160801b03166120e9565b6123b8565b6123b8606085901b6001600160801b038716808204910615150190565b905080866001600160a01b0316116123cf57600080fd5b612365816001600160a01b03881661288c565b6000826000036123f3575083611f82565b600160601b600160e01b03606085901b16821561249c5760006001600160a01b03871685612421828261295c565b925061242d908361293a565b0361246757600061243e8284612730565b90508281106124655761245b83896001600160a01b0316836120e9565b9350505050611f82565b505b61249382612488876124826001600160a01b038c168461293a565b906124f9565b808204910615150190565b92505050611f82565b60006001600160a01b038716856124b3828261295c565b92506124bf908361293a565b1480156124cb57508082115b6124d457600080fd5b60006124e0828461288c565b905061245b612360848a6001600160a01b0316846120e9565b6000826125068382612730565b91508110156122f557600080fd5b806001600160a01b038116811461252a57600080fd5b919050565b6001600160a01b038116811461254457600080fd5b50565b801515811461254457600080fd5b60008083601f84011261256757600080fd5b50813567ffffffffffffffff81111561257f57600080fd5b60208301915083602082850101111561259757600080fd5b9250929050565b60008060008060008060a087890312156125b757600080fd5b86356125c28161252f565b955060208701356125d281612547565b94506040870135935060608701356125e98161252f565b9250608087013567ffffffffffffffff81111561260557600080fd5b61261189828a01612555565b979a9699509497509295939492505050565b60006020828403121561263557600080fd5b8135611a988161252f565b80356001600160801b038116811461252a57600080fd5b60008060006060848603121561266c57600080fd5b83356126778161252f565b925061268560208501612640565b915061269360408501612640565b90509250925092565b6000602082840312156126ae57600080fd5b611a9882612640565b600080600080606085870312156126cd57600080fd5b84356126d88161252f565b93506126e660208601612640565b9250604085013567ffffffffffffffff81111561270257600080fd5b61270e87828801612555565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156122f5576122f561271a565b81810360008312801583831316838312821617156127635761276361271a565b5092915050565b808201828112600083128015821682158216171561278a5761278a61271a565b505092915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8481528360208201526060604082015260006127db606083018486612792565b9695505050505050565b6000600160ff1b82016127fa576127fa61271a565b5060000390565b6001600160801b038281168282160390808211156127635761276361271a565b600081600f0b6f7fffffffffffffffffffffffffffffff1981036128475761284761271a565b60000392915050565b6001600160801b038181168382160190808211156127635761276361271a565b62ffffff8281168282160390808211156127635761276361271a565b818103818111156122f5576122f561271a565b6000602082840312156128b157600080fd5b5051919050565b6000825160005b818110156128d957602081860181015185830152016128bf565b506000920191825250919050565b6000602082840312156128f957600080fd5b8151611a9881612547565b6001600160a01b038281168282160390808211156127635761276361271a565b634e487b7160e01b600052601260045260246000fd5b60008261295757634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176122f5576122f561271a56fea26469706673582212208e282ee879b6d6ef813a81d0e74cac5e2e0935c739eca51dff6e969907c2f4a764736f6c63430008180033a2646970667358221220154645584371ce5beac9bd7616d635013f6a83ad3ffaefa17b7b09b60c00f39064736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6801,
        "contract": "contracts/Factory.sol:Factory",
        "label": "pools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      },
      {
        "astId": 6805,
        "contract": "contracts/Factory.sol:Factory",
        "label": "onlyPool",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 6864,
        "contract": "contracts/Factory.sol:Factory",
        "label": "parameters",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Parameters)9628_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Parameters)9628_storage": {
        "encoding": "inplace",
        "label": "struct IFactory.Parameters",
        "members": [
          {
            "astId": 9617,
            "contract": "contracts/Factory.sol:Factory",
            "label": "factory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 9619,
            "contract": "contracts/Factory.sol:Factory",
            "label": "tokenA",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9621,
            "contract": "contracts/Factory.sol:Factory",
            "label": "tokenB",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9623,
            "contract": "contracts/Factory.sol:Factory",
            "label": "tickLower",
            "offset": 20,
            "slot": "2",
            "type": "t_int24"
          },
          {
            "astId": 9625,
            "contract": "contracts/Factory.sol:Factory",
            "label": "tickUpper",
            "offset": 23,
            "slot": "2",
            "type": "t_int24"
          },
          {
            "astId": 9627,
            "contract": "contracts/Factory.sol:Factory",
            "label": "fee",
            "offset": 26,
            "slot": "2",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}