{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "indexPath",
              "type": "uint32[]"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOutMinimum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.ExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "indexPath",
              "type": "uint32[]"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountInMaximum",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.ExactOutputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "exactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insPoolManager",
      "outputs": [
        {
          "internalType": "contract IPoolManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "indexPath",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.QuoteExactInputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quoteExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint32[]",
              "name": "indexPath",
              "type": "uint32[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "sqrtPriceLimitX96",
              "type": "uint160"
            }
          ],
          "internalType": "struct ISwapRouter.QuoteExactOutputParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quoteExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "amountSpecified",
          "type": "int256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swapInPool",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x82db3eaa55ae8c921122f840a88f53d51bd393edca3ea2dff7d2eaaa54097d3f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "1295399",
    "logsBloom": "0x
    "blockHash": "0xc37c5b3d0eec50c326dc6d1bfbbbeeb7c4ef9226bf9800146974151f00701059",
    "transactionHash": "0x82db3eaa55ae8c921122f840a88f53d51bd393edca3ea2dff7d2eaaa54097d3f",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "1295399",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FC8d32690cc91D4c39d9d3abcBD16989F875707"
  ],
  "numDeployments": 1,
  "solcInputHash": "31bb6983f93ca5e6a7dbf66a48b1cd56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"indexPath\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"indexPath\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insPoolManager\",\"outputs\":[{\"internalType\":\"contract IPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"indexPath\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.QuoteExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"indexPath\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.QuoteExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swapInPool\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapRouter.sol\":\"SwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/IPoolManager.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\n\\ncontract SwapRouter is ISwapRouter {\\n    IPoolManager public insPoolManager;\\n    constructor(address _addr) {\\n        insPoolManager = IPoolManager(_addr);\\n    }\\n\\n    /// @dev Parses a revert reason that should contain the numeric quote\\n    function parseRevertReason(\\n        bytes memory reason\\n    ) private pure returns (int256, int256) {\\n        if (reason.length != 64) {\\n            if (reason.length < 68) revert(\\\"Unexpected error\\\");\\n            assembly {\\n                reason := add(reason, 0x04)\\n            }\\n            revert(abi.decode(reason, (string)));\\n        }\\n        return abi.decode(reason, (int256, int256));\\n    }\\n    function swapInPool(\\n        IPool pool,\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1) {\\n        try\\n            pool.swap(\\n                recipient,\\n                zeroForOne,\\n                amountSpecified,\\n                sqrtPriceLimitX96,\\n                data\\n            )\\n        returns (int256 _amount0, int256 _amount1) {\\n            return (_amount0, _amount1);\\n        } catch (bytes memory reason) {\\n            return parseRevertReason(reason);\\n        }\\n    }\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable override returns (uint256 amountOut) {\\n        uint256 _amountIn = params.amountIn;\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\n        for (uint32 i; i < params.indexPath.length; i++) {\\n            address poolAddr = insPoolManager.getPool(\\n                params.tokenIn,\\n                params.tokenOut,\\n                params.indexPath[i]\\n            );\\n            require(\\n                poolAddr != address(0),\\n                \\\"SWapRouter:exactInput poolAddr cannot be address zero \\\"\\n            );\\n            IPool pool = IPool(poolAddr);\\n\\n            // \\u6784\\u9020 swapCallback \\u51fd\\u6570\\u9700\\u8981\\u7684\\u53c2\\u6570\\n            bytes memory data = abi.encode(\\n                params.tokenIn,\\n                params.tokenOut,\\n                params.indexPath[i],\\n                params.recipient == address(0) ? address(0) : msg.sender\\n            );\\n            (int256 amount0, int256 amount1) = this.swapInPool(\\n                pool,\\n                params.recipient,\\n                zeroForOne,\\n                int256(_amountIn),\\n                params.sqrtPriceLimitX96,\\n                data\\n            );\\n            if (zeroForOne) {\\n                _amountIn -= uint256(amount0);\\n                amountOut += uint256(-amount1);\\n            } else {\\n                _amountIn -= uint256(amount1);\\n                amountOut += uint256(-amount0);\\n            }\\n            if (_amountIn == 0) {\\n                break;\\n            }\\n        }\\n        require(amountOut >= params.amountOutMinimum, \\\"slippage exceeded\\\");\\n        emit Swap(\\n            msg.sender,\\n            zeroForOne,\\n            params.amountIn,\\n            _amountIn,\\n            amountOut\\n        );\\n        return amountOut;\\n    }\\n\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable override returns (uint256 amountIn) {\\n        uint256 _amountOut = params.amountOut;\\n        bool zeroForOne = params.tokenIn < params.tokenOut;\\n        for (uint32 i; i < params.indexPath.length; i++) {\\n            address poolAddr = insPoolManager.getPool(\\n                params.tokenIn,\\n                params.tokenOut,\\n                params.indexPath[i]\\n            );\\n            require(\\n                poolAddr != address(0),\\n                \\\"SWapRouter:exactInput poolAddr cannot be address zero\\\"\\n            );\\n            IPool pool = IPool(poolAddr);\\n            bytes memory _data = abi.encode(\\n                params.tokenIn,\\n                params.tokenOut,\\n                params.indexPath[i],\\n                params.recipient == address(0) ? address(0) : msg.sender\\n            );\\n            (int256 amount0, int256 amount1) = this.swapInPool(\\n                pool,\\n                params.recipient,\\n                zeroForOne,\\n                -int256(_amountOut),\\n                params.sqrtPriceLimitX96,\\n                _data\\n            );\\n            /**\\n              // \\u66f4\\u65b0 amountOut \\u548c amountIn\\n            _amountOut -= uint256(zeroForOne ? -amount1 : -amount0);\\n            amountIn += uint256(zeroForOne ? amount0 : amount1);\\n             */\\n            if (zeroForOne) {\\n                _amountOut -= uint256(-amount1);\\n                amountIn += uint256(amount0);\\n            } else {\\n                amountIn += uint256(amount1);\\n                _amountOut -= uint256(-amount0);\\n            }\\n\\n            if (_amountOut == 0) {\\n                break;\\n            }\\n        }\\n        require(amountIn <= params.amountInMaximum, \\\"slippage exceeded\\\");\\n        emit Swap(\\n            params.recipient,\\n            zeroForOne,\\n            params.amountOut,\\n            _amountOut,\\n            amountIn\\n        );\\n        return amountIn;\\n    }\\n\\n    function quoteExactInput(\\n        QuoteExactInputParams calldata params\\n    ) external override returns (uint256 amountOut) {\\n        return\\n            this.exactInput(\\n                ExactInputParams({\\n                    tokenIn: params.tokenIn,\\n                    tokenOut: params.tokenOut,\\n                    indexPath: params.indexPath,\\n                    recipient: address(0),\\n                    deadline: block.timestamp + 1 hours,\\n                    amountIn: params.amountIn,\\n                    amountOutMinimum: 0,\\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\\n                })\\n            );\\n    }\\n\\n    function quoteExactOutput(\\n        QuoteExactOutputParams calldata params\\n    ) external override returns (uint256 amountIn) {\\n        return\\n            this.exactOutput(\\n                ExactOutputParams({\\n                    tokenIn: params.tokenIn,\\n                    tokenOut: params.tokenOut,\\n                    indexPath: params.indexPath,\\n                    recipient: address(0),\\n                    deadline: block.timestamp + 1 hours,\\n                    amountOut: params.amountOut,\\n                    amountInMaximum: type(uint256).max,\\n                    sqrtPriceLimitX96: params.sqrtPriceLimitX96\\n                })\\n            );\\n    }\\n\\n    function swapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external override {\\n        (\\n            address tokenIn,\\n            address tokenOut,\\n            uint32 index,\\n            address recipient\\n        ) = abi.decode(data, (address, address, uint32, address));\\n        address poolAddr = insPoolManager.getPool(tokenIn, tokenOut, index);\\n        require(\\n            msg.sender == poolAddr,\\n            \\\"SWapRouter:swapCallback msg.sender not equal to pool address\\\"\\n        );\\n        uint256 amountToTrans = amount0Delta > 0\\n            ? uint256(amount0Delta)\\n            : uint256(amount1Delta);\\n        if (recipient == address(0)) {\\n            assembly {\\n                let ptr := mload(0x40)\\n                mstore(ptr, amount0Delta)\\n                mstore(add(ptr, 0x20), amount1Delta)\\n                revert(ptr, 64)\\n            }\\n        }\\n        /**\\n            \\u524d\\u7aef\\u9875\\u9762\\u662f\\u786e\\u5b9a\\u4e86addressA\\u5c31\\u662f\\u9700\\u8981\\u653e\\u5165\\u6c60\\u5b50\\u7684 addressB\\u662f\\u9700\\u8981\\u6362\\u51fa\\u7684\\uff0c\\u6240\\u4ee5\\u8fd9\\u91cc\\u786e\\u5b9a\\u662ftokenIn\\n             */\\n        if (amountToTrans > 0) {\\n            IERC20(tokenIn).transferFrom(\\n                recipient,\\n                poolAddr,\\n                uint256(amountToTrans)\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x04ca1ee0439d76998338cf4acc803d170b2a0ba14134460c13bfcd32b26ab1be\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\n\\ninterface IFactory {\\n    struct Parameters {\\n        address factory;\\n        address tokenA;\\n        address tokenB;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint24 fee;\\n    }\\n\\n    function parameters()\\n        external\\n        view\\n        returns (\\n            address factory,\\n            address tokenA,\\n            address tokenB,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint24 fee\\n        );\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint32 index\\n    ) external view returns (address pool);\\n\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    event PoolCreated(\\n        address token0,\\n        address token1,\\n        uint32 index,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint24 fee,\\n        address pool\\n    );\\n}\\n\",\"keccak256\":\"0xbc3ca9ebc567ecea1133383f21ca12f6210af575b77071297deb4ff1562ff3d4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\n\\ninterface IMintCallback {\\n    function mintCallback(\\n        uint256 amount0Owed,\\n        uint256 amount1Owed,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface ISwapCallback {\\n    function swapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface IPool {\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function fee() external view returns (uint24);\\n\\n    function tick() external view returns (int24);\\n\\n    function tickLower() external view returns (int24);\\n\\n    function tickUpper() external view returns (int24);\\n\\n    function sqrtPriceX96() external view returns (uint160);\\n\\n    function liquidity() external view returns (uint128);\\n\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    ///@notice growth of tokens\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    struct Position {\\n        // \\u8be5 Position \\u62e5\\u6709\\u7684\\u6d41\\u52a8\\u6027\\n        uint128 liquidity;\\n        // \\u53ef\\u63d0\\u53d6\\u7684 token\\u6570\\u91cf\\n        uint128 token0CouldWithdraw;\\n        uint128 token1CouldWithdraw;\\n        // \\u4e0a\\u6b21\\u63d0\\u53d6\\u624b\\u7eed\\u8d39\\u65f6\\u7684 feeGrowthGlobal0X128\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n    }\\n    function getPosition(\\n        address owner\\n    )\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    function collect(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    function mint(\\n        address recipient,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function burn(\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n    event Burn(\\n        address indexed owner,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n}\\n\",\"keccak256\":\"0xc2275402f0cb13941f884ca865e6c390d187fc648c4e8837e954da4812f11a89\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\npragma abicoder v2;\\n\\nimport \\\"./IFactory.sol\\\";\\n\\ninterface IPoolManager is IFactory {\\n    struct PoolInfo {\\n        address pool;\\n        address token0;\\n        address token1;\\n        uint32 index;\\n        uint24 fee;\\n        uint8 feeProtocol;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        int24 tick;\\n        uint160 sqrtPriceX96;\\n        uint128 liquidity;\\n    }\\n\\n    struct Pair {\\n        address token0;\\n        address token1;\\n    }\\n    struct CreateAndInitializeParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint160 sqrtPriceX96;\\n    }\\n\\n    function getPairs() external view returns (Pair[] memory);\\n\\n    function getAllPools() external view returns (PoolInfo[] memory poolsInfo);\\n\\n    function createAndInitializePoolIfNecessary(\\n        CreateAndInitializeParams calldata params\\n    ) external payable returns (address pool);\\n}\\n\",\"keccak256\":\"0x8f6f951c6d9cea8e482249553214dbad71aef2717c141ada73860ab393715a57\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.24;\\npragma abicoder v2;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface ISwapRouter is ISwapCallback {\\n    struct ExactInputParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint32[] indexPath;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n    struct ExactOutputParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint32[] indexPath;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct QuoteExactInputParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint32[] indexPath;\\n        uint256 amountIn;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct QuoteExactOutputParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint32[] indexPath;\\n        uint256 amountOut;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    function quoteExactInput(\\n        QuoteExactInputParams calldata params\\n    ) external returns (uint256 amountOut);\\n\\n    function quoteExactOutput(\\n        QuoteExactOutputParams calldata params\\n    ) external returns (uint256 amountIn);\\n\\n    event Swap(\\n        address indexed sender,\\n        bool zeroForOne,\\n        uint256 amountIn,\\n        uint256 amountInRemaining,\\n        uint256 amountOut\\n    );\\n}\\n\",\"keccak256\":\"0x7d5c9bc7663634bc8a1977ed2dc502969854c16de004c93e8118c072d25b5d26\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161169938038061169983398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611606806100936000396000f3fe6080604052600436106100705760003560e01c80636c207ad01161004e5780636c207ad014610115578063a8a590fd14610128578063ae5ab5e11461013b578063fa483e721461015b57600080fd5b806309c8fcd4146100755780633439aade146100b2578063393dd1da146100e0575b600080fd5b34801561008157600080fd5b50600054610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100be57600080fd5b506100d26100cd366004610f16565b61017d565b6040519081526020016100a9565b3480156100ec57600080fd5b506101006100fb366004610fc2565b6102bb565b604080519283526020830191909152016100a9565b6100d261012336600461106d565b610387565b6100d261013636600461106d565b610798565b34801561014757600080fd5b506100d2610156366004610f16565b610bbb565b34801561016757600080fd5b5061017b6101763660046110a2565b610c89565b005b6040805161010081019091526000903090636c207ad090806101a260208701876110f5565b6001600160a01b031681526020018560200160208101906101c391906110f5565b6001600160a01b031681526020016101de6040870187611119565b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082015260400161022542610e10611179565b81526060808701356020830152600060408301520161024a60a08701608088016110f5565b6001600160a01b03168152506040518263ffffffff1660e01b81526004016102729190611255565b6020604051808303816000875af1158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190611268565b92915050565b600080886001600160a01b031663128acb088989898989896040518763ffffffff1660e01b81526004016102f496959493929190611281565b60408051808303816000875af192505050801561032e575060408051601f3d908101601f1916820190925261032b918101906112de565b60015b610375573d80801561035c576040519150601f19603f3d011682016040523d82523d6000602084013e610361565b606091505b5061036b81610e5d565b925092505061037b565b90925090505b97509795505050505050565b600060a08201358161039f60408501602086016110f5565b6001600160a01b03166103b560208601866110f5565b6001600160a01b031610905060005b6103d16040860186611119565b90508163ffffffff1610156106f857600080546001600160a01b03166371c54fc96103ff60208901896110f5565b61040f60408a0160208b016110f5565b61041c60408b018b611119565b8763ffffffff1681811061043257610432611302565b90506020020160208101906104479190611331565b6040518463ffffffff1660e01b81526004016104659392919061134c565b602060405180830381865afa158015610482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a69190611375565b90506001600160a01b0381166105225760405162461bcd60e51b815260206004820152603660248201527f53576170526f757465723a6578616374496e70757420706f6f6c416464722063604482015275030b73737ba1031329030b2323932b9b9903d32b937960551b60648201526084015b60405180910390fd5b80600061053260208901896110f5565b61054260408a0160208b016110f5565b61054f60408b018b611119565b8763ffffffff1681811061056557610565611302565b905060200201602081019061057a9190611331565b600061058c60808d0160608e016110f5565b6001600160a01b0316146105a057336105a3565b60005b604080516001600160a01b0395861660208201529385169084015263ffffffff909116606083015291909116608082015260a00160408051601f1981840301815291905290506000803063393dd1da8561060360808e0160608f016110f5565b8a8c8f60e001602081019061061891906110f5565b896040518763ffffffff1660e01b815260040161063a969594939291906113e2565b60408051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c91906112de565b9150915086156106ac576106908289611431565b975061069b81611444565b6106a5908a611179565b98506106ce565b6106b68189611431565b97506106c182611444565b6106cb908a611179565b98505b876000036106e05750505050506106f8565b505050505080806106f090611460565b9150506103c4565b508360c001358310156107415760405162461bcd60e51b81526020600482015260116024820152701cdb1a5c1c1859d948195e18d959591959607a1b6044820152606401610519565b60408051821515815260a086013560208201529081018390526060810184905233907f176648f1f11cda284c124490086be42a926ddf0ae887ebe7b1d6b337d8942756906080015b60405180910390a25050919050565b600060a0820135816107b060408501602086016110f5565b6001600160a01b03166107c660208601866110f5565b6001600160a01b031610905060005b6107e26040860186611119565b90508163ffffffff161015610b0b57600080546001600160a01b03166371c54fc961081060208901896110f5565b61082060408a0160208b016110f5565b61082d60408b018b611119565b8763ffffffff1681811061084357610843611302565b90506020020160208101906108589190611331565b6040518463ffffffff1660e01b81526004016108769392919061134c565b602060405180830381865afa158015610893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b79190611375565b90506001600160a01b03811661092d5760405162461bcd60e51b815260206004820152603560248201527f53576170526f757465723a6578616374496e70757420706f6f6c416464722063604482015274616e6e6f742062652061646472657373207a65726f60581b6064820152608401610519565b80600061093d60208901896110f5565b61094d60408a0160208b016110f5565b61095a60408b018b611119565b8763ffffffff1681811061097057610970611302565b90506020020160208101906109859190611331565b600061099760808d0160608e016110f5565b6001600160a01b0316146109ab57336109ae565b60005b604080516001600160a01b0395861660208201529385169084015263ffffffff909116606083015291909116608082015260a00160408051601f1981840301815291905290506000803063393dd1da85610a0e60808e0160608f016110f5565b8a610a188d611444565b8f60e0016020810190610a2b91906110f5565b896040518763ffffffff1660e01b8152600401610a4d969594939291906113e2565b60408051808303816000875af1158015610a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8f91906112de565b915091508615610abf57610aa281611444565b610aac9089611431565b9750610ab8828a611179565b9850610ae1565b610ac9818a611179565b9850610ad482611444565b610ade9089611431565b97505b87600003610af3575050505050610b0b565b50505050508080610b0390611460565b9150506107d5565b508360c00135831115610b545760405162461bcd60e51b81526020600482015260116024820152701cdb1a5c1c1859d948195e18d959591959607a1b6044820152606401610519565b610b6460808501606086016110f5565b60408051831515815260a08701356020820152908101849052606081018590526001600160a01b0391909116907f176648f1f11cda284c124490086be42a926ddf0ae887ebe7b1d6b337d894275690608001610789565b604080516101008101909152600090309063a8a590fd9080610be060208701876110f5565b6001600160a01b03168152602001856020016020810190610c0191906110f5565b6001600160a01b03168152602001610c1c6040870187611119565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509385525050506020820152604001610c6342610e10611179565b8152606080870135602083015260001960408301520161024a60a08701608088016110f5565b6000808080610c9a85870187611483565b600080546040516371c54fc960e01b81529599509397509195509350916001600160a01b03909116906371c54fc990610cdb9088908890889060040161134c565b602060405180830381865afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190611375565b9050336001600160a01b03821614610d9c5760405162461bcd60e51b815260206004820152603c60248201527f53576170526f757465723a7377617043616c6c6261636b206d73672e73656e6460448201527f6572206e6f7420657175616c20746f20706f6f6c2061646472657373000000006064820152608401610519565b6000808a13610dab5788610dad565b895b90506001600160a01b038316610dce576040518a8152896020820152604081fd5b8015610e51576040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528716906323b872dd906064016020604051808303816000875af1158015610e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4f91906114dd565b505b50505050505050505050565b6000808251604014610ee157604483511015610eae5760405162461bcd60e51b815260206004820152601060248201526f2ab732bc3832b1ba32b21032b93937b960811b6044820152606401610519565b60048301925082806020019051810190610ec89190611510565b60405162461bcd60e51b815260040161051991906115bd565b82806020019051810190610ef591906112de565b91509150915091565b600060a08284031215610f1057600080fd5b50919050565b600060208284031215610f2857600080fd5b813567ffffffffffffffff811115610f3f57600080fd5b610f4b84828501610efe565b949350505050565b6001600160a01b0381168114610f6857600080fd5b50565b8015158114610f6857600080fd5b60008083601f840112610f8b57600080fd5b50813567ffffffffffffffff811115610fa357600080fd5b602083019150836020828501011115610fbb57600080fd5b9250929050565b600080600080600080600060c0888a031215610fdd57600080fd5b8735610fe881610f53565b96506020880135610ff881610f53565b9550604088013561100881610f6b565b945060608801359350608088013561101f81610f53565b925060a088013567ffffffffffffffff81111561103b57600080fd5b6110478a828b01610f79565b989b979a50959850939692959293505050565b60006101008284031215610f1057600080fd5b60006020828403121561107f57600080fd5b813567ffffffffffffffff81111561109657600080fd5b610f4b8482850161105a565b600080600080606085870312156110b857600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156110dd57600080fd5b6110e987828801610f79565b95989497509550505050565b60006020828403121561110757600080fd5b813561111281610f53565b9392505050565b6000808335601e1984360301811261113057600080fd5b83018035915067ffffffffffffffff82111561114b57600080fd5b6020019150600581901b3603821315610fbb57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156102b5576102b5611163565b80516001600160a01b039081168352602080830151909116818401526040808301516101009185018290528051918501829052600092610120860192918101918491905b808310156111f657835163ffffffff1685529381019392810192600192909201916111d0565b50505050606083015161121460608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c083015160c085015260e083015161124d60e08601826001600160a01b03169052565b509392505050565b602081526000611112602083018461118c565b60006020828403121561127a57600080fd5b5051919050565b6001600160a01b0387811682528615156020830152604082018690528416606082015260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b600080604083850312156112f157600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff8116811461132c57600080fd5b919050565b60006020828403121561134357600080fd5b61111282611318565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b60006020828403121561138757600080fd5b815161111281610f53565b60005b838110156113ad578181015183820152602001611395565b50506000910152565b600081518084526113ce816020860160208601611392565b601f01601f19169290920160200192915050565b6001600160a01b03878116825286811660208301528515156040830152606082018590528316608082015260c060a08201819052600090611425908301846113b6565b98975050505050505050565b818103818111156102b5576102b5611163565b6000600160ff1b820161145957611459611163565b5060000390565b600063ffffffff80831681810361147957611479611163565b6001019392505050565b6000806000806080858703121561149957600080fd5b84356114a481610f53565b935060208501356114b481610f53565b92506114c260408601611318565b915060608501356114d281610f53565b939692955090935050565b6000602082840312156114ef57600080fd5b815161111281610f6b565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561152257600080fd5b815167ffffffffffffffff8082111561153a57600080fd5b818401915084601f83011261154e57600080fd5b815181811115611560576115606114fa565b604051601f8201601f19908116603f01168101908382118183101715611588576115886114fa565b816040528281528760208487010111156115a157600080fd5b6115b2836020830160208801611392565b979650505050505050565b60208152600061111260208301846113b656fea2646970667358221220af8fb1094c98cc3e8fede108116fe1d360fc22c292d692bf9a1e0eeed088ba1e64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80636c207ad01161004e5780636c207ad014610115578063a8a590fd14610128578063ae5ab5e11461013b578063fa483e721461015b57600080fd5b806309c8fcd4146100755780633439aade146100b2578063393dd1da146100e0575b600080fd5b34801561008157600080fd5b50600054610095906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100be57600080fd5b506100d26100cd366004610f16565b61017d565b6040519081526020016100a9565b3480156100ec57600080fd5b506101006100fb366004610fc2565b6102bb565b604080519283526020830191909152016100a9565b6100d261012336600461106d565b610387565b6100d261013636600461106d565b610798565b34801561014757600080fd5b506100d2610156366004610f16565b610bbb565b34801561016757600080fd5b5061017b6101763660046110a2565b610c89565b005b6040805161010081019091526000903090636c207ad090806101a260208701876110f5565b6001600160a01b031681526020018560200160208101906101c391906110f5565b6001600160a01b031681526020016101de6040870187611119565b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250938552505050602082015260400161022542610e10611179565b81526060808701356020830152600060408301520161024a60a08701608088016110f5565b6001600160a01b03168152506040518263ffffffff1660e01b81526004016102729190611255565b6020604051808303816000875af1158015610291573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b59190611268565b92915050565b600080886001600160a01b031663128acb088989898989896040518763ffffffff1660e01b81526004016102f496959493929190611281565b60408051808303816000875af192505050801561032e575060408051601f3d908101601f1916820190925261032b918101906112de565b60015b610375573d80801561035c576040519150601f19603f3d011682016040523d82523d6000602084013e610361565b606091505b5061036b81610e5d565b925092505061037b565b90925090505b97509795505050505050565b600060a08201358161039f60408501602086016110f5565b6001600160a01b03166103b560208601866110f5565b6001600160a01b031610905060005b6103d16040860186611119565b90508163ffffffff1610156106f857600080546001600160a01b03166371c54fc96103ff60208901896110f5565b61040f60408a0160208b016110f5565b61041c60408b018b611119565b8763ffffffff1681811061043257610432611302565b90506020020160208101906104479190611331565b6040518463ffffffff1660e01b81526004016104659392919061134c565b602060405180830381865afa158015610482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a69190611375565b90506001600160a01b0381166105225760405162461bcd60e51b815260206004820152603660248201527f53576170526f757465723a6578616374496e70757420706f6f6c416464722063604482015275030b73737ba1031329030b2323932b9b9903d32b937960551b60648201526084015b60405180910390fd5b80600061053260208901896110f5565b61054260408a0160208b016110f5565b61054f60408b018b611119565b8763ffffffff1681811061056557610565611302565b905060200201602081019061057a9190611331565b600061058c60808d0160608e016110f5565b6001600160a01b0316146105a057336105a3565b60005b604080516001600160a01b0395861660208201529385169084015263ffffffff909116606083015291909116608082015260a00160408051601f1981840301815291905290506000803063393dd1da8561060360808e0160608f016110f5565b8a8c8f60e001602081019061061891906110f5565b896040518763ffffffff1660e01b815260040161063a969594939291906113e2565b60408051808303816000875af1158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c91906112de565b9150915086156106ac576106908289611431565b975061069b81611444565b6106a5908a611179565b98506106ce565b6106b68189611431565b97506106c182611444565b6106cb908a611179565b98505b876000036106e05750505050506106f8565b505050505080806106f090611460565b9150506103c4565b508360c001358310156107415760405162461bcd60e51b81526020600482015260116024820152701cdb1a5c1c1859d948195e18d959591959607a1b6044820152606401610519565b60408051821515815260a086013560208201529081018390526060810184905233907f176648f1f11cda284c124490086be42a926ddf0ae887ebe7b1d6b337d8942756906080015b60405180910390a25050919050565b600060a0820135816107b060408501602086016110f5565b6001600160a01b03166107c660208601866110f5565b6001600160a01b031610905060005b6107e26040860186611119565b90508163ffffffff161015610b0b57600080546001600160a01b03166371c54fc961081060208901896110f5565b61082060408a0160208b016110f5565b61082d60408b018b611119565b8763ffffffff1681811061084357610843611302565b90506020020160208101906108589190611331565b6040518463ffffffff1660e01b81526004016108769392919061134c565b602060405180830381865afa158015610893573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b79190611375565b90506001600160a01b03811661092d5760405162461bcd60e51b815260206004820152603560248201527f53576170526f757465723a6578616374496e70757420706f6f6c416464722063604482015274616e6e6f742062652061646472657373207a65726f60581b6064820152608401610519565b80600061093d60208901896110f5565b61094d60408a0160208b016110f5565b61095a60408b018b611119565b8763ffffffff1681811061097057610970611302565b90506020020160208101906109859190611331565b600061099760808d0160608e016110f5565b6001600160a01b0316146109ab57336109ae565b60005b604080516001600160a01b0395861660208201529385169084015263ffffffff909116606083015291909116608082015260a00160408051601f1981840301815291905290506000803063393dd1da85610a0e60808e0160608f016110f5565b8a610a188d611444565b8f60e0016020810190610a2b91906110f5565b896040518763ffffffff1660e01b8152600401610a4d969594939291906113e2565b60408051808303816000875af1158015610a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8f91906112de565b915091508615610abf57610aa281611444565b610aac9089611431565b9750610ab8828a611179565b9850610ae1565b610ac9818a611179565b9850610ad482611444565b610ade9089611431565b97505b87600003610af3575050505050610b0b565b50505050508080610b0390611460565b9150506107d5565b508360c00135831115610b545760405162461bcd60e51b81526020600482015260116024820152701cdb1a5c1c1859d948195e18d959591959607a1b6044820152606401610519565b610b6460808501606086016110f5565b60408051831515815260a08701356020820152908101849052606081018590526001600160a01b0391909116907f176648f1f11cda284c124490086be42a926ddf0ae887ebe7b1d6b337d894275690608001610789565b604080516101008101909152600090309063a8a590fd9080610be060208701876110f5565b6001600160a01b03168152602001856020016020810190610c0191906110f5565b6001600160a01b03168152602001610c1c6040870187611119565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509385525050506020820152604001610c6342610e10611179565b8152606080870135602083015260001960408301520161024a60a08701608088016110f5565b6000808080610c9a85870187611483565b600080546040516371c54fc960e01b81529599509397509195509350916001600160a01b03909116906371c54fc990610cdb9088908890889060040161134c565b602060405180830381865afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190611375565b9050336001600160a01b03821614610d9c5760405162461bcd60e51b815260206004820152603c60248201527f53576170526f757465723a7377617043616c6c6261636b206d73672e73656e6460448201527f6572206e6f7420657175616c20746f20706f6f6c2061646472657373000000006064820152608401610519565b6000808a13610dab5788610dad565b895b90506001600160a01b038316610dce576040518a8152896020820152604081fd5b8015610e51576040516323b872dd60e01b81526001600160a01b0384811660048301528381166024830152604482018390528716906323b872dd906064016020604051808303816000875af1158015610e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4f91906114dd565b505b50505050505050505050565b6000808251604014610ee157604483511015610eae5760405162461bcd60e51b815260206004820152601060248201526f2ab732bc3832b1ba32b21032b93937b960811b6044820152606401610519565b60048301925082806020019051810190610ec89190611510565b60405162461bcd60e51b815260040161051991906115bd565b82806020019051810190610ef591906112de565b91509150915091565b600060a08284031215610f1057600080fd5b50919050565b600060208284031215610f2857600080fd5b813567ffffffffffffffff811115610f3f57600080fd5b610f4b84828501610efe565b949350505050565b6001600160a01b0381168114610f6857600080fd5b50565b8015158114610f6857600080fd5b60008083601f840112610f8b57600080fd5b50813567ffffffffffffffff811115610fa357600080fd5b602083019150836020828501011115610fbb57600080fd5b9250929050565b600080600080600080600060c0888a031215610fdd57600080fd5b8735610fe881610f53565b96506020880135610ff881610f53565b9550604088013561100881610f6b565b945060608801359350608088013561101f81610f53565b925060a088013567ffffffffffffffff81111561103b57600080fd5b6110478a828b01610f79565b989b979a50959850939692959293505050565b60006101008284031215610f1057600080fd5b60006020828403121561107f57600080fd5b813567ffffffffffffffff81111561109657600080fd5b610f4b8482850161105a565b600080600080606085870312156110b857600080fd5b8435935060208501359250604085013567ffffffffffffffff8111156110dd57600080fd5b6110e987828801610f79565b95989497509550505050565b60006020828403121561110757600080fd5b813561111281610f53565b9392505050565b6000808335601e1984360301811261113057600080fd5b83018035915067ffffffffffffffff82111561114b57600080fd5b6020019150600581901b3603821315610fbb57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156102b5576102b5611163565b80516001600160a01b039081168352602080830151909116818401526040808301516101009185018290528051918501829052600092610120860192918101918491905b808310156111f657835163ffffffff1685529381019392810192600192909201916111d0565b50505050606083015161121460608601826001600160a01b03169052565b506080830151608085015260a083015160a085015260c083015160c085015260e083015161124d60e08601826001600160a01b03169052565b509392505050565b602081526000611112602083018461118c565b60006020828403121561127a57600080fd5b5051919050565b6001600160a01b0387811682528615156020830152604082018690528416606082015260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b600080604083850312156112f157600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff8116811461132c57600080fd5b919050565b60006020828403121561134357600080fd5b61111282611318565b6001600160a01b03938416815291909216602082015263ffffffff909116604082015260600190565b60006020828403121561138757600080fd5b815161111281610f53565b60005b838110156113ad578181015183820152602001611395565b50506000910152565b600081518084526113ce816020860160208601611392565b601f01601f19169290920160200192915050565b6001600160a01b03878116825286811660208301528515156040830152606082018590528316608082015260c060a08201819052600090611425908301846113b6565b98975050505050505050565b818103818111156102b5576102b5611163565b6000600160ff1b820161145957611459611163565b5060000390565b600063ffffffff80831681810361147957611479611163565b6001019392505050565b6000806000806080858703121561149957600080fd5b84356114a481610f53565b935060208501356114b481610f53565b92506114c260408601611318565b915060608501356114d281610f53565b939692955090935050565b6000602082840312156114ef57600080fd5b815161111281610f6b565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561152257600080fd5b815167ffffffffffffffff8082111561153a57600080fd5b818401915084601f83011261154e57600080fd5b815181811115611560576115606114fa565b604051601f8201601f19908116603f01168101908382118183101715611588576115886114fa565b816040528281528760208487010111156115a157600080fd5b6115b2836020830160208801611392565b979650505050505050565b60208152600061111260208301846113b656fea2646970667358221220af8fb1094c98cc3e8fede108116fe1d360fc22c292d692bf9a1e0eeed088ba1e64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8836,
        "contract": "contracts/SwapRouter.sol:SwapRouter",
        "label": "insPoolManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPoolManager)9930"
      }
    ],
    "types": {
      "t_contract(IPoolManager)9930": {
        "encoding": "inplace",
        "label": "contract IPoolManager",
        "numberOfBytes": "20"
      }
    }
  }
}